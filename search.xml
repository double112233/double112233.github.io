<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>S5鐵蟻測試隊</title>
      <link href="//20S5-Durant.html"/>
      <url>//20S5-Durant.html</url>
      
        <content type="html"><![CDATA[<h2 id="隊伍構成"><a href="#隊伍構成" class="headerlink" title="隊伍構成"></a>隊伍構成</h2><h3 id="鐵蟻"><a href="#鐵蟻" class="headerlink" title="鐵蟻"></a>鐵蟻</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Durant @ Life Orb  </span><br><span class="line">Ability: Hustle  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 4 HP &#x2F; 252 Atk &#x2F; 252 Spe  </span><br><span class="line">Jolly Nature  </span><br><span class="line">- Iron Head  </span><br><span class="line">- X-Scissor  </span><br><span class="line">- Dig  </span><br><span class="line">- Giga Impact</span><br></pre></td></tr></table></figure><p>終極衝擊是為了勉強有個控速可以用</p><h3 id="轟擂金剛猩"><a href="#轟擂金剛猩" class="headerlink" title="轟擂金剛猩"></a>轟擂金剛猩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Rillaboom-Gmax @ Assault Vest  </span><br><span class="line">Ability: Grassy Surge  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 252 HP &#x2F; 196 Atk &#x2F; 60 Def  </span><br><span class="line">Brave Nature  </span><br><span class="line">IVs: 0 Spe  </span><br><span class="line">- Fake Out  </span><br><span class="line">- Knock Off  </span><br><span class="line">- Grassy Glide  </span><br><span class="line">- Wood Hammer  </span><br></pre></td></tr></table></figure><p>底速蓋場地的猩猩，A練到11n剩下塞B</p><h3 id="火隼"><a href="#火隼" class="headerlink" title="火隼"></a>火隼</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Talonflame @ Expert Belt  </span><br><span class="line">Ability: Gale Wings  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 236 Atk &#x2F; 20 SpD &#x2F; 252 Spe  </span><br><span class="line">Jolly Nature  </span><br><span class="line">- Protect  </span><br><span class="line">- Tailwind  </span><br><span class="line">- Flare Blitz  </span><br><span class="line">- Dual Wingbeat</span><br></pre></td></tr></table></figure><p>用雙翼不是勇鳥是因為想要即使環環不在也能連續打出先制飛招</p><h3 id="母愛管"><a href="#母愛管" class="headerlink" title="母愛管"></a>母愛管</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Indeedee-F (F) @ Safety Goggles  </span><br><span class="line">Ability: Psychic Surge  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 4 HP &#x2F; 252 Def &#x2F; 252 SpA  </span><br><span class="line">Quiet Nature  </span><br><span class="line">IVs: 0 Atk &#x2F; 0 Spe  </span><br><span class="line">- Follow Me  </span><br><span class="line">- Expanding Force  </span><br><span class="line">- Helping Hand  </span><br><span class="line">- Safeguard  </span><br></pre></td></tr></table></figure><p>神秘守護多一個龜花對策</p><h3 id="花療環環"><a href="#花療環環" class="headerlink" title="花療環環"></a>花療環環</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Comfey @ Focus Sash  </span><br><span class="line">Ability: Triage  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 252 HP &#x2F; 156 Def &#x2F; 100 SpD  </span><br><span class="line">Bold Nature  </span><br><span class="line">IVs: 0 Atk  </span><br><span class="line">- Floral Healing  </span><br><span class="line">- Draining Kiss  </span><br><span class="line">- Trick Room  </span><br><span class="line">- Ally Switch</span><br></pre></td></tr></table></figure><p>把整個隊伍串起來的輔助</p><p>花療幫助火隼疾風之翼和煤炭龜噴火，讓坦度不錯的猩猩更持久的站場輸出，同時對手無法快速處理鐵蟻和愛管時可以施加更多壓力</p><p>吸取之吻可以無視redirection破命帶，偶爾可以派上用場</p><p>空間可以在面對兔子之類的高速陣時逆向應對，因為環環和猩猩主打的是不受空間影響的先制行動，同時雙向控速可以在BO3的時候提供不同走向，對方要提防兩個走向也能給我選怪優勢</p><p>交換場地是可以當作第二個follow me來用，可以當作愛管、鐵蟻和猩猩的守住來用，也可以和火隼或煤炭搭配來拖回合</p><h3 id="煤炭龜"><a href="#煤炭龜" class="headerlink" title="煤炭龜"></a>煤炭龜</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Torkoal @ Room Service  </span><br><span class="line">Ability: Drought  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 252 HP &#x2F; 252 SpA &#x2F; 4 SpD  </span><br><span class="line">Modest Nature  </span><br><span class="line">IVs: 0 Atk &#x2F; 14 Spe  </span><br><span class="line">- Protect  </span><br><span class="line">- Eruption  </span><br><span class="line">- Heat Wave  </span><br><span class="line">- Earth Power  </span><br></pre></td></tr></table></figure><p>客房服務可以穩定地擊敗草鋼，順風後甚至能過底速60種，至於和底速先制爪比起來哪個有優勢不好說</p><h2 id="常見應對"><a href="#常見應對" class="headerlink" title="常見應對"></a>常見應對</h2><ol><li>VS 圍攻岩牛</li></ol><p>鐵蟻硬生生的比岩牛多1速，直接follow me極巨地打未極巨的岩牛15/16亂一，如果對面順風就等愛管倒下再出火隼接上順風即可</p><ol start="2"><li>VS 雙超</li></ol><p>鐵蟻有克制雙超的招式而且有超能抗性，極巨並且換上猩猩繼續施壓就可以，如果對面有空間可能性也可以帶上環環和龜</p><ol start="3"><li>VS 兔子</li></ol><p>兔子旁邊可能是吸引或是順風，因為鐵蟻打波克基斯、皮皮和愛管都確一，所以愛管用follow me犧牲自己後接上順風即可</p><h2 id="SD-code"><a href="#SD-code" class="headerlink" title="SD code"></a>SD code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Durant @ Life Orb  </span><br><span class="line">Ability: Hustle  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 4 HP &#x2F; 252 Atk &#x2F; 252 Spe  </span><br><span class="line">Jolly Nature  </span><br><span class="line">- Iron Head  </span><br><span class="line">- X-Scissor  </span><br><span class="line">- Dig  </span><br><span class="line">- Giga Impact  </span><br><span class="line"></span><br><span class="line">Rillaboom-Gmax @ Assault Vest  </span><br><span class="line">Ability: Grassy Surge  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 252 HP &#x2F; 196 Atk &#x2F; 60 Def  </span><br><span class="line">Brave Nature  </span><br><span class="line">IVs: 0 Spe  </span><br><span class="line">- Fake Out  </span><br><span class="line">- Knock Off  </span><br><span class="line">- Grassy Glide  </span><br><span class="line">- Wood Hammer  </span><br><span class="line"></span><br><span class="line">Talonflame @ Expert Belt  </span><br><span class="line">Ability: Gale Wings  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 236 Atk &#x2F; 20 SpD &#x2F; 252 Spe  </span><br><span class="line">Jolly Nature  </span><br><span class="line">- Protect  </span><br><span class="line">- Tailwind  </span><br><span class="line">- Flare Blitz  </span><br><span class="line">- Dual Wingbeat  </span><br><span class="line"></span><br><span class="line">Indeedee-F (F) @ Safety Goggles  </span><br><span class="line">Ability: Psychic Surge  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 4 HP &#x2F; 252 Def &#x2F; 252 SpA  </span><br><span class="line">Quiet Nature  </span><br><span class="line">IVs: 0 Atk &#x2F; 0 Spe  </span><br><span class="line">- Follow Me  </span><br><span class="line">- Expanding Force  </span><br><span class="line">- Helping Hand  </span><br><span class="line">- Safeguard  </span><br><span class="line"></span><br><span class="line">Comfey @ Focus Sash  </span><br><span class="line">Ability: Triage  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 252 HP &#x2F; 156 Def &#x2F; 100 SpD  </span><br><span class="line">Bold Nature  </span><br><span class="line">IVs: 0 Atk  </span><br><span class="line">- Floral Healing  </span><br><span class="line">- Draining Kiss  </span><br><span class="line">- Trick Room  </span><br><span class="line">- Ally Switch  </span><br><span class="line"></span><br><span class="line">Torkoal @ Room Service  </span><br><span class="line">Ability: Drought  </span><br><span class="line">Level: 50  </span><br><span class="line">EVs: 252 HP &#x2F; 252 SpA &#x2F; 4 SpD  </span><br><span class="line">Modest Nature  </span><br><span class="line">IVs: 0 Atk &#x2F; 14 Spe  </span><br><span class="line">- Protect  </span><br><span class="line">- Eruption  </span><br><span class="line">- Heat Wave  </span><br><span class="line">- Earth Power  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 隊伍構築 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鐵蟻 </tag>
            
            <tag> 烈箭鷹 </tag>
            
            <tag> 花療環環 </tag>
            
            <tag> 愛管侍（母） </tag>
            
            <tag> 轟擂金剛猩 </tag>
            
            <tag> 煤炭龜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-2144</title>
      <link href="//TIOJ-2144.html"/>
      <url>//TIOJ-2144.html</url>
      
        <content type="html"><![CDATA[<h1 id="2144-喔踢貓"><a href="#2144-喔踢貓" class="headerlink" title="2144 . 喔踢貓"></a>2144 . 喔踢貓</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/2144" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/2144</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有一隻貓，叫做喔踢。她因為在背地裡對$N$老大不利，某天被$N$老大的騎士團抓到，而遭受慘無人道的酷刑…</p><p>「求求你別再考我了…」喔踢貓如此哀號道。</p><p>精神及肉體受到打擊的她，轉向警察局求助。背ㄍ…不是，根據喔踢貓的敘述，已知$K$騎士團中連續的團員們相乘（$K$團員們是自然數），會剛好是$N$老大的倍數。由於你不能濫抓無辜百姓，所以只能抓最少的$K$，來找到$N$老大。</p><p>以上敘述想講的是，請找到最小的$K$，使得$K!$是$N$的倍數。<br>註：$0! = 1$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>基本上就是把$N$分解成$p_n^{a_n}$的形式，看需要多大才能湊齊$a_n$個$p_n$，之後取max</p><p>然後我懶得寫好好判的方式，於是直接$O(a_n\log(a_n))$暴搜，這樣的複雜度是$O(Q\log(n)\log(\log(n)))$，然後就TLE了!?</p><p>TLE的點是naive的質因數分解$O(\sqrt{n})$，整份code的複雜就就變成$O(Q\sqrt{n})$，那只要建質數表就可以壓成$O(\sqrt{n}\mbox{內的質數數量})$的質因數分解了，AC</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pi&gt; v;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"><span class="built_in">bitset</span>&lt;N&gt; isp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isp[i]) &#123;</span><br><span class="line">            p.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; i*p[j]&lt;N; j++) &#123;</span><br><span class="line">            isp[i*p[j]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%p[j]==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q,n,ans;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0\n"</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; p[i]*p[i]&lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n%p[i]==<span class="number">0</span>) &#123;</span><br><span class="line">                v.push_back(&#123;p[i],<span class="number">0</span>&#125;);</span><br><span class="line">                <span class="keyword">while</span> (n%p[i]==<span class="number">0</span>) &#123;</span><br><span class="line">                    v.back().S++;</span><br><span class="line">                    n/=p[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            v.push_back(&#123;n,<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (v[i].S&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                v[i].S--;</span><br><span class="line">                <span class="keyword">int</span> tmp=cnt;</span><br><span class="line">                <span class="keyword">while</span> (tmp%v[i].F==<span class="number">0</span>) &#123;</span><br><span class="line">                    tmp/=v[i].F;</span><br><span class="line">                    v[i].S--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans, cnt*v[i].F);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 數學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1582</title>
      <link href="//TIOJ-1582.html"/>
      <url>//TIOJ-1582.html</url>
      
        <content type="html"><![CDATA[<h1 id="1582-A-TRIVIAL-physical-problem"><a href="#1582-A-TRIVIAL-physical-problem" class="headerlink" title="1582 . A TRIVIAL physical problem"></a>1582 . A TRIVIAL physical problem</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1582" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1582</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Have you ever heard the lesson called “WhileCome Physics”?</p><p>The lesson is too hard to understand.<br>You will find the velocity of free fall with buoyancy and calculus.<br>IT’S SO TERRIBLE!!!</p><p>But 楽しいです，the problem we will solve today is such a TRIVIAL problem.</p><p>Now you have a polynomial function of velocity,<br>the only one mission you should solve is to find the function of acceleration!</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>實作題</p><p>要把一個多項式微分，很明顯只要完成兩個步驟就好：</p><ol><li>把每一項分離成$a_nx^n$的形式</li><li>$a_n$*=$n$,$n$- -</li></ol><p>第二步很顯然，第一步的話首先會想到用+-號拆出每一項，不過從範測就會知道踩到3x^-2這種項就爛掉了，所以很明顯^後面的-不能當作切開的地方，AC</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> t;</span><br><span class="line"><span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pi&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">make_int</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,neg=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>]==<span class="string">'-'</span>) &#123;</span><br><span class="line">        neg=<span class="number">-1</span>;</span><br><span class="line">        s=s.substr(<span class="number">1</span>,s.length()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</span><br><span class="line">        ans=ans*<span class="number">10</span>+s[i]-<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans*neg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">derive</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.back()==<span class="string">'x'</span>) &#123;<span class="comment">//一次項</span></span><br><span class="line">        p.push_back(&#123;<span class="number">0</span>,make_int(s.substr(<span class="number">0</span>,s.length()<span class="number">-1</span>))&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]==<span class="string">'x'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> a=make_int(s.substr(<span class="number">0</span>,i)),b=make_int(s.substr(i+<span class="number">2</span>,s.length()-i<span class="number">-2</span>));</span><br><span class="line">            a*=b;</span><br><span class="line">            b--;</span><br><span class="line">            p.push_back(&#123;b,a&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">(pi x, pi y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t[i]==<span class="string">'+'</span>) &#123;</span><br><span class="line">            derive(t.substr(l,i-l));</span><br><span class="line">            l=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t[i]==<span class="string">'-'</span>&amp;&amp;(!i||t[i<span class="number">-1</span>]!=<span class="string">'^'</span>))&#123;</span><br><span class="line">            derive(t.substr(l,i-l));</span><br><span class="line">            l=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    derive(t.substr(l,t.length()-l));</span><br><span class="line">    sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p[<span class="number">0</span>].S;</span><br><span class="line">    <span class="keyword">if</span> (p[<span class="number">0</span>].F) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"x^"</span>&lt;&lt;p[<span class="number">0</span>].F;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;p.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i].S==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p[i].S&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">'+'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p[i].S;</span><br><span class="line">        <span class="keyword">if</span> (p[i].F) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"x^"</span>&lt;&lt;p[i].F;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 字串 </tag>
            
            <tag> 數學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1456</title>
      <link href="//TIOJ-1456.html"/>
      <url>//TIOJ-1456.html</url>
      
        <content type="html"><![CDATA[<h1 id="1456-修課問題"><a href="#1456-修課問題" class="headerlink" title="1456 . 修課問題"></a>1456 . 修課問題</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1456" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1456</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>大學的課程是多采多姿的。</p><p>每個人可以選修想要學習的課程，可說是讓每個人適性發展。</p><p>但是因為預備知識以及預先需要的技術的關係，所以有一些課程需要先學習某些課程才能夠選修，這則稱做『擋修』。</p><p>現在你有 $n$ 種想要學習的課程，並將它從 $1$ 編號到 $n$，並且排成一個學習序列，裡面的數字只會有$1$～$n$各一個。</p><p>但是你突然發現有 $m$ 個『擋修』關係，這可能會讓你原先的學習計畫不能夠實行。</p><p>到底你能不能按照你原先的計畫實行呢？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>我不知道別人怎麼做的，但我第一次過的應該是奧步XDDD</p><p>首先你會發現如果可以把所有條件都存下來你就做完了，很可惜$M=10^7$怎樣也存不下的，不過很有趣的是$N$只有$1000$，然後如果沒有重邊，這張圖的邊數頂多只有$999+998+\ldots+2+1=500000$就存的下了，所以先特判$M&gt;n^2$的不可能，剩下的就把圖存下來然後暴力做就AC了</p><p>不過原題其實不保證沒有重邊，所以如果出題者比較惡意的話這個做法會被卡掉，比較正常的作法應該是砍掉重邊之後真的把圖建出來，學習序列也可以直接視為$a_i\rightarrow a_{i+1}$的邊，之後找上面有沒有環</p><p>唬爛code：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000</span>+<span class="number">10</span>,M=<span class="number">500000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,id[N];</span><br><span class="line">pi q[M];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m&gt;n*(n<span class="number">-1</span>)/<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO\n"</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> a,b;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> a;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;q[i].F&gt;&gt;q[i].S;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">            id[a]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; flag&amp;&amp;i&lt;m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id[q[i].F]&gt;id[q[i].S]) &#123;</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好回來想上面的問題，要怎麼好好的把原題做完呢？</p><p>呃其實實際的邊的數量真的沒那麼多，所以只要把重邊通通殺掉還是可以用正常的做法的<br>那就用$n$個set來存對於每個$i$，被$i$擋修的科目有哪些，複雜度$O(Mlogn)$，稍微克制一下還是可以AC的（畢竟$logn$超級小）</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,id[N];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; q[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m) &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            q[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            q[a].insert(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">            id[a]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; flag&amp;&amp;i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;j:q[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (id[i]&gt;id[j]) &#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 圖論 </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1437</title>
      <link href="//TIOJ-1437.html"/>
      <url>//TIOJ-1437.html</url>
      
        <content type="html"><![CDATA[<h1 id="1437-蚯蚓之娃娃搶奪陰謀"><a href="#1437-蚯蚓之娃娃搶奪陰謀" class="headerlink" title="1437 . 蚯蚓之娃娃搶奪陰謀"></a>1437 . 蚯蚓之娃娃搶奪陰謀</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1437" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1437</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>再過幾天就要開始摳頂大賽啦!!而除了前十多名可以進入笑隊外,</p><p>第一名還有特別獎項–猴子娃娃一隻……</p><p>一向很喜歡娃娃(??)的蚯蚓,聽到消息之後便下定決心要拿下第一名!!</p><p>而蚯蚓知道,由於摳頂大賽的問題對資遜的人們來說都太難了,所以大部分人都有作弊對象.</p><p>於是蚯蚓就決定找出答案「最初」是源自何方(可能有很多來源),</p><p>並且偷偷的放入病毒讓他無法編譯,如此一來蚯蚓便能趁亂拿下第一.</p><p>另外因為作弊手法不精,所以大家都只能抄自己前面一排的人</p><p>不過大家都很聰明,只要前面一排有人比自己威,就會選擇其中最威的抄……</p><p>若是前排同時有兩個以上最威的人,就兩個都抄.</p><p>而若是自己跟前排最威者同樣威,基於沒什麼自信,還是會抄XD</p><p>現在藉由某方法,蚯蚓得知了每個人的威度和座位,</p><p>請找出要在哪幾個人的電腦中放入病毒……</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>我是第8個AC的，極度懷疑自己假解，如果有人可以hack歡迎通知</p><p>把題目看完之後就知道，受害者若且唯若他沒有抄別人code，那沒抄別人的code的條件就是他的威度比他前一排的最大值還大，$O(w^2)$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w,g[<span class="number">160</span>] [<span class="number">160</span>],mx,premx=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;w; i++) &#123;</span><br><span class="line">        mx=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;w; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;g[i] [j];</span><br><span class="line">            <span class="keyword">if</span> (g[i] [j]&gt;premx) &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;j&lt;&lt;<span class="string">","</span>&lt;&lt;i&lt;&lt;<span class="string">")\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mx=<span class="built_in">max</span>(mx, g[i] [j]);</span><br><span class="line">        &#125;</span><br><span class="line">        premx=mx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1339</title>
      <link href="//TIOJ-1339.html"/>
      <url>//TIOJ-1339.html</url>
      
        <content type="html"><![CDATA[<h1 id="1339-俄羅斯娃娃－未完"><a href="#1339-俄羅斯娃娃－未完" class="headerlink" title="1339 . 俄羅斯娃娃－未完"></a>1339 . 俄羅斯娃娃－未完</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1339" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1339</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>你用了俄羅斯娃娃許了願，然而俄羅斯娃娃們因法力不支(?)而紛紛倒下了。被這魔力深深吸引的你，決定好要去尋找其它擁有法力的俄羅斯娃娃繼續許願。</p><p>要知道，俄羅斯娃娃的法力不是由單一一個俄羅斯娃娃決定的，而是由一堆俄羅斯娃娃們之間的相互作用所決定的。<br>一堆俄羅斯娃娃的法力總和的計算方法也非常簡單：對於每對滿足$A$放得進$B$的相異俄羅斯娃娃(這裡只要求寬和高大於等於另一個的寬和高)，他們所貢獻的法力大小即為在$B$內放入$A$後所剩的空間大小。也就是說，法力總和等於</p><p>$$\sum\limits_{w_i\leq w_j,h_i\leq h_j,i\neq j}w_jh_j-w_ih_i$$</p><p>你到了一間俄羅斯娃娃店，看到了一組又一組的俄羅斯娃娃。當然，你想要找到法力最高強的那組俄羅斯娃娃。為此，你想要用程式幫助你計算給定的俄羅斯娃娃們的法力總和。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這題要算的式子有很明顯地偏序的感覺，既然只有二維就寫個BIT吧。先把式子拆成$i$的部分和$j$的部分，$i$的部分需要一個BIT知道有多少比她小的俄羅斯娃娃，$j$的部分可以用一個BIT維護，因為數值有點大兩邊都要離散化</p><p>然後我就TLE了@@</p><p><code>map</code>跑太慢，開<code>unordered_map</code>就AC了，時間只有一半不到OAO，<code>unordered</code>賽高！！！</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000000</span>+<span class="number">10</span>,mod=<span class="number">1000000009</span>;</span><br><span class="line"><span class="keyword">int</span> n,<span class="built_in">bit</span>[N],bit2[N],ans,s[N];</span><br><span class="line">pi p[N];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (pos&lt;=n) &#123;</span><br><span class="line">        <span class="built_in">bit</span>[pos]+=k;</span><br><span class="line">        <span class="built_in">bit</span>[pos]%=mod;</span><br><span class="line">        bit2[pos]++;</span><br><span class="line">        pos+=lowbit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> pi <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>,num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos) &#123;</span><br><span class="line">        cnt+=<span class="built_in">bit</span>[pos];</span><br><span class="line">        cnt%=mod;</span><br><span class="line">        num+=bit2[pos];</span><br><span class="line">        pos-=lowbit(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;cnt,num&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p[i].F&gt;&gt;p[i].S;</span><br><span class="line">        s[i]=p[i].S;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p, p+n);</span><br><span class="line">    sort(s, s+n);</span><br><span class="line">    <span class="keyword">int</span> nn=n;</span><br><span class="line">    n=unique(s, s+n)-s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        mp[s[i]]=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nn; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> a=query(mp[p[i].S]);</span><br><span class="line">        ans+=(p[i].F*p[i].S%mod*a.S%mod-a.F+mod)%mod;</span><br><span class="line">        ans%=mod;</span><br><span class="line">        add(mp[p[i].S], p[i].F*p[i].S%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> BIT </tag>
            
            <tag> priority_queue </tag>
            
            <tag> 離散化 </tag>
            
            <tag> unordered_map </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1338</title>
      <link href="//TIOJ-1338.html"/>
      <url>//TIOJ-1338.html</url>
      
        <content type="html"><![CDATA[<h1 id="1338-因數元素"><a href="#1338-因數元素" class="headerlink" title="1338 . 因數元素"></a>1338 . 因數元素</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1338" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1338</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>現在你有一個長度為$N$的正整數序列$C_0,C_1,\ldots,C_{N-1}$。<br>對於這個序列的某個連續子序列$C_{[L,R)}$，定義這個連續子序列的「因數元素」為一個範圍內的數$C_i$（$L\leq i&lt;R$），使得它可以整除每一個$C_{[L,R)}$之間的數。<br>給你$L,R$，試判斷這個連續子序列中存不存在「因數元素」。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>溫馨提示，<code>log2</code>是不會過的，請使用<code>__builtin_clz</code>或<code>__log</code></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib1338.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1000000</span>+<span class="number">10</span>,MAXLOGN=<span class="number">21</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mi[MAXLOGN] [MAXN],f[MAXLOGN] [MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">long</span> <span class="keyword">long</span> C[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        f[<span class="number">0</span>][i]=mi[<span class="number">0</span>][i]=C[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;<span class="number">21</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            mi[j][i]=<span class="built_in">min</span>(mi[j<span class="number">-1</span>][i], mi[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]);</span><br><span class="line">            f[j][i]=__gcd(f[j<span class="number">-1</span>][i], f[j<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=__lg(R-L);</span><br><span class="line">    <span class="keyword">return</span> __gcd(f[k][L],f[k][R-(<span class="number">1</span>&lt;&lt;k)])==<span class="built_in">min</span>(mi[k][L],mi[k][R-(<span class="number">1</span>&lt;&lt;k)]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> Sparse_Table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1274</title>
      <link href="//TIOJ-1274.html"/>
      <url>//TIOJ-1274.html</url>
      
        <content type="html"><![CDATA[<h1 id="1274-純屬無聊-Tie-Breaker"><a href="#1274-純屬無聊-Tie-Breaker" class="headerlink" title="1274 . [純屬無聊] Tie Breaker"></a>1274 . [純屬無聊] Tie Breaker</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1274" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1274</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>本題考驗你對小向的試煉題敘的理解程度。請回答以下三個問題：</p><ol><li>假設2-2的圖來自遊戲「甲」(一個包含五個字母的單字)，2-3的圖來自動畫「乙」(一個包含九個字母的單字)，請問甲和乙中字母e出現幾次？</li><li>假設3-1的圖來自動畫「丙」(包含四個中文字)，3-3的圖來自漫畫「丁」(包含六個中文字)，請問丙和丁中聲調為二聲的字有幾個？</li><li>假設4-1的圖來自動畫「戊」(包含八個中文字，其中第五個字是三聲)，4-2的圖來自動畫「己」(包含四個中文字)，4-3的圖來自動畫「庚」(包含六個中文字)，且令$x$為己的前兩個字翻譯成英文後的字母數，$y$為戊的第二個字所代表的數字，「辛」是「庚」的第一個字。請問「辛」倍的$x+y$是幾？</li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>裡面的東西只有3-1我有看過，不過既然google有以圖搜尋就不是問題了，解答已反白，code就不直接貼在網頁上了破梗低調點（Ｘ</p><font color="#FFFFFF"><p>2-2：Deemo</p><p>2-3：charlotte</p><p>3-1：遊戲人生</p><p>3-3：我的英雄學院</p><p>4-1：中二病也想談戀愛</p><p>4-2：東京闇鴉</p><p>4-3：雙星之陰陽師</p></font><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><a href="https://pastebin.com/4XtVXckM" target="_blank" rel="noopener">https://pastebin.com/4XtVXckM</a></p>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1198</title>
      <link href="//TIOJ-1198.html"/>
      <url>//TIOJ-1198.html</url>
      
        <content type="html"><![CDATA[<h1 id="1198-8-puzzle"><a href="#1198-8-puzzle" class="headerlink" title="1198 . 8-puzzle"></a>1198 . 8-puzzle</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1198" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1198</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>請找出在 8-puzzle遊戲中，從初始盤面至最終盤面最少需要移動的方格數。每一個方格一次只能移至相鄰的空格中。例如在下面的圖例中，從初始盤面至最終盤面最少需要移動 $4$ 個方格。</p><p><img src="/images/TIOJ-1198a.png" alt=""></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>8-puzzle啊……據說大家都是IDA*，那就寫個$9!=362880$的暴力好了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> now,cur[<span class="number">3</span>][<span class="number">3</span>],fin,zx,zy,cx[]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,cy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;pi&gt; q;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; used;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;cur[i][j];</span><br><span class="line">            now=now*<span class="number">9</span>+cur[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        fin=fin*<span class="number">9</span>+a;</span><br><span class="line">    &#125;</span><br><span class="line">    q.push(&#123;now,<span class="number">0</span>&#125;);</span><br><span class="line">    used.insert(now);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        now=q.front().F;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&gt;<span class="number">-1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>; j&gt;<span class="number">-1</span>; j--) &#123;</span><br><span class="line">                cur[i][j]=now%<span class="number">9</span>;</span><br><span class="line">                now/=<span class="number">9</span>;</span><br><span class="line">                <span class="keyword">if</span>(!cur[i][j])&#123;</span><br><span class="line">                    zx=i;</span><br><span class="line">                    zy=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (zx+cx[i]&gt;<span class="number">-1</span>&amp;&amp;zx+cx[i]&lt;<span class="number">3</span>&amp;&amp;zy+cy[i]&gt;<span class="number">-1</span>&amp;&amp;zy+cy[i]&lt;<span class="number">3</span>) &#123;</span><br><span class="line">                swap(cur[zx][zy], cur[zx+cx[i]][zy+cy[i]]);</span><br><span class="line">                now=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++) &#123;</span><br><span class="line">                        now=now*<span class="number">9</span>+cur[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (now==fin) &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;q.front().S+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!used.count(now))&#123;</span><br><span class="line">                    q.push(&#123;now,q.front().S+<span class="number">1</span>&#125;);</span><br><span class="line">                    used.insert(now);</span><br><span class="line">                &#125;</span><br><span class="line">                swap(cur[zx][zy], cur[zx+cx[i]][zy+cy[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 暴力 </tag>
            
            <tag> 經典題 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1127</title>
      <link href="//TIOJ-1127.html"/>
      <url>//TIOJ-1127.html</url>
      
        <content type="html"><![CDATA[<h1 id="1127-鋪磁磚問題"><a href="#1127-鋪磁磚問題" class="headerlink" title="1127 . 鋪磁磚問題"></a>1127 . 鋪磁磚問題</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1127" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1127</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>某學校有一片狹長形狀的畸零地，其寬度、長度分別為$30$公分及$n\times 10$公分(其中 $n$ 為輸入之值，$n$為奇數，$n\geq 3$)，但在西北角缺了寬度、長度均為$10$公分的一角。現在我們要使用 $\frac{3\times n-1}{2}$ 塊磁磚將此片畸零地鋪滿，每塊磁磚的寬度、長度均為$10$公分及$20$公分，我們想知道共有多少種鋪法。請你撰寫一個程式來求出答案。以下圖為例，當 $n=3$ 時，可看出共有$4$種不同的鋪法。</p><p><img src="/images/TIOJ-1127a.gif" alt=""></p><p>當$n=5$時，由下圖，可看出共有$15$種不同的鋪法。</p><p><img src="/images/TIOJ-1127a.gif" alt=""></p><p><strong>Constraints</strong></p><p>$n$為奇數，$3\leq n\leq 41$。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>DP計數，考慮該圖形右界以外最右邊的垂直線即可</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,dp[<span class="number">50</span>];</span><br><span class="line">    dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;<span class="number">42</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">        dp[i]=<span class="number">1</span>+<span class="number">3</span>*dp[i<span class="number">-2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">4</span>; i-j&gt;<span class="number">0</span>; j+=<span class="number">2</span>) &#123;</span><br><span class="line">            dp[i]+=dp[i-j]*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[n]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1043</title>
      <link href="//TIOJ-1043.html"/>
      <url>//TIOJ-1043.html</url>
      
        <content type="html"><![CDATA[<h1 id="1043-F-名偵探蚵男"><a href="#1043-F-名偵探蚵男" class="headerlink" title="1043 . F.名偵探蚵男"></a>1043 . F.名偵探蚵男</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1043" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1043</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>米花市出了一個大案件：重達近千斤的貨櫃一靠港立即不翼而飛，警方急著尋找貨櫃主人，卻發現主人橫死在自己家裡反鎖的浴室！名偵探蚵男再一次得到任務，他必須找出貨櫃裡究竟藏有什麼，並解開密室殺人案。</p><p>所幸當初將東西搬上貨櫃的工人並未受到襲擊，根據他的說法，貨櫃裡有許多不同的貨品，包裝得很隱密，因此只知道貨櫃總重量以及每種貨品多重。至於每種貨品各有多少個，很遺憾地工人並不記得。警方想要分析這個貨櫃可能的組合方式，卻發現問題意外地複雜，舉例來說，貨櫃重$10$公斤，貨品有$4$種，分別為$1$、$2$、$3$、$5$公斤：</p><p>$$10=5+5=5+3+2=5+3+1+1=5+2+1+1+1=5+1+1+1+1+1=\ldots=1+1+1+\ldots+1$$</p><p>總計竟有高達$20$種可能性！</p><p>身為蚵男，你是否能利用程式找出所有可能的組合情形，幫助無力的警方呢？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>左看右看之後可能會發現這題有一點點無限背包的感覺，只是改問你有幾種裝的方式</p><p>無限背包我們是記錄重量w可以裝下的最大價值，現在改成紀錄重量w有幾種裝的方式，就可以輕鬆列出dp式：<code>dp[i] [j]=dp[i-1] [j]+dp[i-1] [j-[w[i]]]</code></p><p>接下來你還發現可以可以滾動，這樣就是時間$O(nw)$空間$O(w)$，AC！</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">10010</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p,c,n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p&amp;&amp;n&amp;&amp;p) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p; i++) &#123;</span><br><span class="line">            dp[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=c; j&lt;=p; j++) &#123;</span><br><span class="line">                dp[j]+=dp[j-c];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[p]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1066</title>
      <link href="//TIOJ-1066.html"/>
      <url>//TIOJ-1066.html</url>
      
        <content type="html"><![CDATA[<h1 id="1066-B-惱人的零錢"><a href="#1066-B-惱人的零錢" class="headerlink" title="1066 . B.惱人的零錢"></a>1066 . B.惱人的零錢</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1066" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1066</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>東東在買東西付帳，總是習慣直接從錢包中拿鈔票付帳，而懶得掏出零錢來。久而久之，錢包裡面累積了許多零錢，簡直重得不得了，所以東東終於受夠了！因此，她決定趁著今天買東西的時候，想辦法盡量減輕負擔。於是東東開始盤算要怎樣湊出足夠的零錢，才能讓付出去的硬幣個數越多越好。但是當她走到櫃台結帳時，才想到自己如果多付一些硬幣讓老闆找錢，說不定可以讓自己的錢包更輕！雖然老闆自己的零錢個數也不多，但是老闆人都很好，一定會用盡量少的硬幣找錢給東東。</p><p>因此，東東開始煩惱到底要怎麼給錢，才能夠盡量「用掉」最多的硬幣呢（所謂的「用掉」的硬幣個數，指的是拿出去的硬幣數，扣掉老闆找回來的硬幣數）？可惜的是，東東的算術一向不太靈光，因此希望你能幫忙他解決這個煩惱。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>就……把所有零錢塞給老闆就好了，反正不會比較差（最慘就是他全部扔回來而已）</p><p>接下來要證考慮$20$元新台幣還是可以greedy找錢，其實也很容易</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n,tot,cnt,d[<span class="number">5</span>],p[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>&#125;,b[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        tot=cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;d[i];</span><br><span class="line">            tot+=d[i]*p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">            b[i]+=d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        tot-=n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">4</span>; i&gt;<span class="number">-1</span>&amp;&amp;tot ; i--) &#123;</span><br><span class="line">            cnt+=<span class="built_in">min</span>(tot/p[i], b[i]);</span><br><span class="line">            tot-=<span class="built_in">min</span>(tot/p[i], b[i])*p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1034</title>
      <link href="//TIOJ-1034.html"/>
      <url>//TIOJ-1034.html</url>
      
        <content type="html"><![CDATA[<h1 id="1034-搶救雷恩大兵-Saving-Ryan"><a href="#1034-搶救雷恩大兵-Saving-Ryan" class="headerlink" title="1034 . 搶救雷恩大兵 (Saving Ryan)"></a>1034 . 搶救雷恩大兵 (Saving Ryan)</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1034" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1034</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>米勒上尉收到一道緊急命令，要求將二等兵雷恩即刻護送至指定地點。米勒上尉馬上攤開戰場地圖，希望能規畫出一條最安全的路線。戰場地圖可視為一個 $N\times N$ 的表格，表格中的每個位置只可以往東、南、西、北四個鄰近的位置移動。根據情報，米勤上尉已經掌握每個位置的敵軍兵力，所謂最安全的路線，指的是這條路線上所有敵軍兵力總和最小的路線。</p><p><img src="/images/TIOJ-1034a.png" alt=""></p><p>以圖一為例，圖中的數字代表敵軍兵力。如果雷恩目前在 $(4, 1)$ 的位置，需要被護送到 $(1, 4)$ 的位置，則最安全的路線為 $(4, 1) \rightarrow (4, 2) \rightarrow (3, 2) \rightarrow (2, 2) \rightarrow (2, 3) \rightarrow (1, 3) \rightarrow (1, 4)$，路線上的敵軍兵力總數是 $2+1+1+2+3+3+1 = 13$。<br>由於雷恩非常重要，因此上級決定支援米勒上尉。米勒上尉可以用「一發」死光炸彈轟炸地圖上的「一個」位置，轟炸過後該位置的敵軍將灰飛湮滅。以圖二為例，如果米勒上尉轟炸了 $(2, 4)$ 位置，則新的最安全路線將變成$(4, 1) \rightarrow (4, 2) \rightarrow (4, 3) \rightarrow (4, 4) \rightarrow (3,4) \rightarrow (2, 4) \rightarrow (1, 4)$，路線上的敵軍兵力總數是 $2+1+1+1+1+0+1 = 7$。</p><p>請撰寫一個程式，幫助米勒上尉找出在一發死光炸彈支援下，最安全路線的敵軍兵力總數。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>第一個要注意的是範圍，$N\leq 20$基本上可以$O(N^6)$，也就是說這題可以考慮各種暴力演算法</p><p>接下來是範圍，很有趣的是他說$q\leq N^4$，由於詢問和維護的次數差太多了，預處理會是好選擇</p><p>接下來就是愉快的拆解題目了</p><p>首先無視可以炸掉某一格的部分，那我們可以用Floyd-Warshall做到$O(N^3)$預處理$O(1)$回答，那炸掉一格的做法就很明顯了：枚舉炸掉哪一格，答案是該格到起點的距離+該格到終點的距離-該格的點權</p><p>不過Floyd-Warshall要求權重在邊上，這邊可以參考<a href="https://blog.ototot.tk/2017/02/tioj-1034-saving-ryan.html" target="_blank" rel="noopener">oToToT的神奇做法</a>，或是像我一樣枚舉中點的時候扣掉中點的權重就好了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> n,g[<span class="number">25</span>][<span class="number">25</span>],p[<span class="number">500</span>],id[<span class="number">25</span>][<span class="number">25</span>],dis[<span class="number">500</span>][<span class="number">500</span>],q;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;pi,<span class="keyword">int</span>&gt;&gt; e;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n*n; j++) &#123;</span><br><span class="line">            dis[i][j]=inf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;g[i][j];</span><br><span class="line">            id[i][j]=i*n+j;</span><br><span class="line">            p[id[i][j]]=g[i][j];</span><br><span class="line">            dis[id[i][j]][id[i][j]]=g[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                dis[id[i][j]][id[i<span class="number">-1</span>][j]]=p[id[i][j]]+p[id[i<span class="number">-1</span>][j]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j<span class="number">-1</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                dis[id[i][j]][id[i][j<span class="number">-1</span>]]=p[id[i][j]]+p[id[i][j<span class="number">-1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n)&#123;</span><br><span class="line">                dis[id[i][j]][id[i+<span class="number">1</span>][j]]=p[id[i][j]]+p[id[i+<span class="number">1</span>][j]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span>&lt;n)&#123;</span><br><span class="line">                dis[id[i][j]][id[i][j+<span class="number">1</span>]]=p[id[i][j]]+p[id[i][j+<span class="number">1</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n*=n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">                dis[i][j]=<span class="built_in">min</span>(dis[i][j],dis[i][k]+dis[k][j]-p[k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c,d,ans=inf;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">        a--;</span><br><span class="line">        b--;</span><br><span class="line">        c--;</span><br><span class="line">        d--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans, dis[id[a][b]][i]+dis[i][id[c][d]]<span class="number">-2</span>*p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> Floyd-Warshall </tag>
            
            <tag> 圖論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1865</title>
      <link href="//TIOJ-1865.html"/>
      <url>//TIOJ-1865.html</url>
      
        <content type="html"><![CDATA[<h1 id="1865-小向的魔法術鬣"><a href="#1865-小向的魔法術鬣" class="headerlink" title="1865 . 小向的魔法術鬣"></a>1865 . 小向的魔法術鬣</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1865" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1865</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>還記得小向嗎？對，就是那個天龍國的天才魔法少女。<br>身為天龍國的魔法少女，研究一兩種魔法術鬣是一定要的，小向常常窩在魔法書堆裡面研究她抓到的魔法術鬣。<br>有天，小向發現了一種奇特的魔法術鬣，她決定要好好的跟她的新術鬣玩一下。</p><p><img src="/images/TIOJ-1865a.jpg" alt=""></p><p>這時候問題就來了，<br>我們都知道，魔法術鬣是種脾氣很壞的魔法生物，他們常常會很亂又很長，但是要是不找出他們的規律，小向就會很煩躁導致一整週失眠。<br>還好小向已經發現一種簡化魔法術鬣的方法了。<br>魔法術鬣是由一長串的魔法整數構成的，而小向有兩種魔法可以幫助她簡化魔法術鬣，分別是：</p><ol><li>檢查魔法術鬣第$i$項是否可以整除第$i+1$項。</li><li>把魔法術鬣第$i$項變成第$i$項和第$i+1$項的魔法最大公因數，把第$i+1$項變成第$i$項和第$i+1$項的魔法最小公倍數。</li></ol><p>只要讓魔法術鬣的每一項(最後一項除外)全部都可以整除他的下一項，小向就可以輕鬆的研究魔法術鬣了。</p><p>小向為了要施魔法所以必須專心，於是她將操作和檢查的工作交給你，天龍國的魔法少女實習生，請你使用小向的魔法，簡化魔法術鬣。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>首先你會想說我們從前面往後檢查，如果有兩個數字不符合就用魔法換掉，可是由於這樣會讓前一項變少，所以要再往前檢查前一組會不會因此爛掉，然後你算一下就發現這樣次數就爆掉了</p><p>接著你考慮最糟的情況(就是每次都要一路用魔法用到第$0$項的情況)，就會發現說在這種情況下，我把判斷跳過直接爆是好的，所以對於所有case都這樣做就沒了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib1865.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=GetN();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">Magic_Operate(j);</span><br><span class="line">    End();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 數學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1819</title>
      <link href="//TIOJ-1819.html"/>
      <url>//TIOJ-1819.html</url>
      
        <content type="html"><![CDATA[<h1 id="1819-綿羊山"><a href="#1819-綿羊山" class="headerlink" title="1819 . 綿羊山"></a>1819 . 綿羊山</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1819" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1819</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有天你閒來沒事，所以你就去爬綿羊山(因為魯蛋沒開台)…</p><p>但是你突然發現爬綿羊山好累…所以你決定算一下爬綿羊山浪費體力的程度是多少=w=<br>綿羊山其實是一座山脈，山地跟平地的交界處剛好都在數線上的整數座標上，爬綿羊山浪費體力的程度為”連續山地的數量”</p><p>這時邪惡的小綿羊看到你在爬山，所以他決定派出$N$組軍隊，每組被分配到一個任務區間$i, j$，表示從座標 $i$ 一路改造到座標 $j$ ，軍隊會把$i$ 到 $j$ 之間的平地改造成山地、山地改造成平地。<br>每組軍隊改造完後都會有一個「爬綿羊山浪費體力的程度」。</p><p>現在你想知道所有「爬綿羊山浪費體力的程度」中的最大值。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這題想到解的時候很有趣，de完bug之後發現很毒瘤@@</p><p>首先你會想到最顯然的解就是離散化之後開線段樹，樹上維護區間的答案以及這個區間左右是不是$1$，然後記得離散化的時候對於$[l,r]$要把$l-1,l,r,r+1$都進去離散化，這樣才不會把空白砍掉XDDD</p><p>我最先想到的其實是第二個解，首先你會發現修改順序不影響最後浪費體力的程度，接著又發現兩個左右端點有重複的修改其實等價於一個修改，反向來說如果都不重複，那答案就會$+1$，所以就開一個<code>set</code>維護所有端點(左閉右開)，吃到一個詢問就去查現在的$[l,r)$在不在<code>set</code>裡，如果在就把<code>set</code>裡的拔掉，否則就加進去，那麼<code>set</code>3大小的一半就是當前的答案</p><p>這題毒瘤的點在於，他給的區間不保證第一個值小於等於第二個OAO……</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,maxu=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">swap(a,b);</span><br><span class="line"><span class="keyword">if</span>(s.count(a))</span><br><span class="line">s.erase(a);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s.insert(a);</span><br><span class="line"><span class="keyword">if</span>(s.count(b+<span class="number">1</span>))</span><br><span class="line">s.erase(b+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s.insert(b+<span class="number">1</span>);</span><br><span class="line">maxu=<span class="built_in">max</span>(maxu,(<span class="keyword">int</span>)s.<span class="built_in">size</span>()/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 離散化 </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1509</title>
      <link href="//TIOJ-1509.html"/>
      <url>//TIOJ-1509.html</url>
      
        <content type="html"><![CDATA[<h1 id="1509-地道問題"><a href="#1509-地道問題" class="headerlink" title="1509 . 地道問題"></a>1509 . 地道問題</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1509" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1509</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>在一個神祕的城堡中，其地底建造了許多地道及房間。每間房間連到其他房間的通道各有不同的柵門，且其柵門有特別的設計，有些只能由內向外開，有些則只能由外向內開。國王把這些房間用來當作囚房，除了一間房間做為侍衛休息室以外，其他每間房間皆做為一個囚犯的囚房。這些囚犯每天白天負責工作，到了晚上每位囚犯有專屬的侍衛，將他們一一帶到囚房。</p><p>由於要防止囚犯脫逃，除了侍衛休息室以外，地道及房間中皆沒有燈光。因此每天每位侍衛必須分配一個油燈，從侍衛休息室將囚犯帶到他們的房間，再回到侍衛休息室，在這段時間內皆必須點亮油燈。國王是個很節儉的人，為了節省侍衛油燈所消耗的油，他派人根據房間之間的地道長度所需行走時間，量測出經過每段通道使用油燈的耗油量。國王精打細算的要求這些侍衛每天使用油燈的耗油總量必須為最低。但由於侍衛將囚犯帶到房間的時間可能不同，因此不必考慮侍衛共用油燈的可能。</p><p>請以一個程式，根據所給房間通道及經過房間通道所需的耗油量，找出侍衛每天使用油燈的最低耗油總量。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>給你一張有向帶權圖，對於每個點求從起點走到它再走回起點的最小距離，再把所有點的答案加總</p><p>其實也就拆成從起點走過去和走回起點兩件事而已，所以只要Dijkstra一次，把邊反轉再Dijkstra第二次就好了，複雜度$O(nlogn)$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,n,dis[<span class="number">1000010</span>],go[<span class="number">1000010</span>],a,b,c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; e[<span class="number">1000010</span>];</span><br><span class="line">pair&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; p[<span class="number">1000000</span>];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">e[a].push_back(&#123;b,c&#125;);</span><br><span class="line">p[i]=&#123; &#123;b,a&#125;,c&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)</span><br><span class="line">dis[i]=<span class="number">2147483647</span>;</span><br><span class="line">q.push(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">a=q.top().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(go[a])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">go[a]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[a].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[a]+e[a][i].second&lt;dis[e[a][i].first])&#123;</span><br><span class="line">dis[e[a][i].first]=dis[a]+e[a][i].second;</span><br><span class="line">q.push(&#123;dis[e[a][i].first],e[a][i].first&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!go[i])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=dis[i];</span><br><span class="line">dis[i]=<span class="number">2147483647</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">e[i].resize(<span class="number">0</span>);</span><br><span class="line">go[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">e[p[i].first.first].push_back(&#123;p[i].first.second,p[i].second&#125;);</span><br><span class="line">q.push(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">a=q.top().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(go[a])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">go[a]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[a].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[a]+e[a][i].second&lt;dis[e[a][i].first])&#123;</span><br><span class="line">dis[e[a][i].first]=dis[a]+e[a][i].second;</span><br><span class="line">q.push(&#123;dis[e[a][i].first],e[a][i].first&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!go[i])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=dis[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 圖論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1691</title>
      <link href="//TIOJ-1691.html"/>
      <url>//TIOJ-1691.html</url>
      
        <content type="html"><![CDATA[<h1 id="1691-Problem-A-圍籬架設問題-含pdf檔"><a href="#1691-Problem-A-圍籬架設問題-含pdf檔" class="headerlink" title="1691 . Problem A 圍籬架設問題 [含pdf檔]"></a>1691 . Problem A 圍籬架設問題 [含pdf檔]</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1691" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1691</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>還記得甦蹦嗎？沒錯，還是那隻愛吃橘子的烏龜(*)。</p><p>話說甦蹦歷經了21年總算找到了傳說中的橘子的種子；也發現了神秘培植法──烏拉拉嘎嚕嚕嘎烏。</p><p>在你幫他分析過栽種的經濟效益後他決定開始栽種傳說中的橘子了！</p><p>但是甦蹦十分小心謹慎：已經砸了$21$年青春在傳說中的橘子上面了，如今真的要栽種了當然不能容許一點差池。</p><p>所以甦蹦決定要架設一條長形的籬笆把他的橘子園跟INF聚落隔離。</p><p>於是甦蹦對著橘子園的邊界進行研究：既然是在INF聚落嘛，橘子園的邊界自然也可以用一條數線表示，只能在整數點的位置打樁、且在每個位置打樁有著不同的代價。</p><p>甦蹦把橘子園邊界的數線給了DBTF看。他們兩個分別回家草擬了籬笆結構圖，也就是要在哪些位置打樁。</p><p>第二天他們兩個人交換彼此的設計圖，發現了幾個巧合：</p><ol><li>他們打樁的數量相等、總代價也相等，但方案不完全相同！</li><li>他們分別把代價依照位置排序好後形成的序列竟然長得一模一樣！</li><li>不僅如此，他們打樁位置的個數是所有符合上述條件中最多的！</li></ol><p>你聽聞有此事覺得很有趣，便偷偷探勘了橘子園邊界，想算出甦蹦的籬笆總共打了幾個樁。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>好好的觀察之後，會發現這兩個子序列只需要有一個值來自的位置不同就好了，考慮在$a$中$a_l=a_r$，那麼取$[1,l]+[r+1,n]$和$[1,l-1]+[r,n]$一定是最好的，所以我們是要考慮所有$a_i=a_j$的組合中$i-j$的最小值，那麼開個<code>map</code>就沒了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="keyword">int</span> n,a,maxu;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(m[a])</span><br><span class="line">maxu=<span class="built_in">max</span>(maxu,n+m[a]-i);</span><br><span class="line">m[a]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1666</title>
      <link href="//TIOJ-1666.html"/>
      <url>//TIOJ-1666.html</url>
      
        <content type="html"><![CDATA[<h1 id="1666-nim"><a href="#1666-nim" class="headerlink" title="1666 . nim"></a>1666 . nim</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1666" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1666</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>球主(kelvin) 跟 宜平(yiping) 在玩一個很好玩的遊戲：</p><p>球主和宜平各拿出一些硬幣放在桌上，兩個人的硬幣分成放在兩堆<br>所以一堆有 $a$ 個，一堆有 $b$ 個，</p><p>現在球主跟宜平輪流那硬幣，每次拿可以從一堆硬幣拿走任何數量的硬幣，但至少要拿一個，<br>而且只能從其中一堆拿 (不能兩堆各拿一些)<br>如果輪到某個人的時候那個人沒東西可以拿 (桌上的硬幣都被拿走了)，則那個人就輸了<br>贏的人就可以拿走全部的硬幣!!!! (超爽ㄉ)</p><p>現在給你 $a$ 跟 $b$，若球主先開始拿，請輸出誰會贏!!</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>數學水題<br>如果兩堆數量相同就後手必勝，否則先手必勝<br>必勝策略也顯然，如果兩堆一樣，後手模仿先手就好了，否則先手把它拿到兩堆一樣</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)&#123;</span><br><span class="line"><span class="keyword">if</span>(a==b)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"yiping\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"kelvin\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 數學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1505</title>
      <link href="//TIOJ-1505.html"/>
      <url>//TIOJ-1505.html</url>
      
        <content type="html"><![CDATA[<h1 id="1505-Assssss"><a href="#1505-Assssss" class="headerlink" title="1505 . Assssss!!"></a>1505 . Assssss!!</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1505" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1505</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>現在有一個除法數列</p><p>$X_1 / X_2 / X_3 / \ldots / X_n$</p><p>如果會整除，那巧克男孩就會Asssss～!! (別懷疑，這個人對任何東西都可以啊嘶的)<br>不過問題是這樣的，就是原本的數列中是有括號的，但是現在消失了。<br>問你有沒有可能存在一個括號的擺法，使得巧克男孩啊～嘶～～!!</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>我們可以證明只要$a_1\times a_3\times a_4\times\ldots\times a_n$是$a_2$的倍數就足夠了</p><p>首先我們可以觀察出把它整理完之後會是一個分數，那我們首先可以發現$a_2$一定在分母，因為估計說對每個$/$進行運算時，前面的分子分母關係不變，後面的分子分母會反轉，所以$a_2$會剛好被反轉一次，那麼他一定在分母；接下來是構造，我們只要去做$a_1/(…(((a_2/a_3)/a_4)/a_5)…./a_n)$就可以讓他變成$\frac{a_1\times a_3\times a_4\times a_5\times\ldots\times a_n}{a_2}$，所以我們只要確認他是不是整數就完事了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;y)</span><br><span class="line">swap(x,y);</span><br><span class="line"><span class="keyword">return</span> (x%y)?gcd(y,x%y):y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,n,a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b;</span><br><span class="line">b/=gcd(a,b);</span><br><span class="line">n-=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">b/=gcd(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Asssss!!\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"zzz...\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 數學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1489</title>
      <link href="//TIOJ-1489.html"/>
      <url>//TIOJ-1489.html</url>
      
        <content type="html"><![CDATA[<h1 id="1489-E-核心字串"><a href="#1489-E-核心字串" class="headerlink" title="1489 . E.核心字串"></a>1489 . E.核心字串</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1489" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1489</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>在加解密中，常常藉由加入大量沒用的資訊來隱藏資訊，若要取得隱藏的資訊，則是用大家都知道的方式來解密。雖然解密方法眾所皆知，但是往往需要大量的計算量，達到保護資料的作用。</p><p>其中一種需要大量計算的加解密稱為核心字串，核心字串的加密原理是將資訊原封不動，只在需要加密資訊的前後加入冗長的資訊保護。加密過後的資訊會有以下的性質：加密過後的字串包含所有符號的最短連續區間即為隱藏的資訊。</p><p><img src="/images/TIOJ-1489a.png" alt=""></p><p>如上面字串所示連續區間$(1, 3)$包含符號集合${a, b, c}$。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>每次看到精美包裝的資結題就蠻開心的</p><p>雖說長的一臉字串樣，可是這題就是問「給你一個由$1$～$26$組成的正整數序列，求包含$1$～$26$的區間長度的最小值」</p><p>第一眼就爬行法吧，維護裡面有$1$～$26$的$l$和$r$，爬的時候求$min(r-l)$發生時$l$和$r$的值</p><p>然後這題我寫了兩種做法，一種是直接拿<code>queue</code>維護現在的$[l,r)$，另一種是對於每個英文字母開一個<code>queue</code>紀錄該字母所有出現的位置，那麼$l$和$r$就是所有<code>front</code>的最小和最大值$[l,r]$，更新$l$的時候就pop掉最小的<code>front</code>就好了</p><p>查了一下網路上第一種最法好像很多人寫過，就只放第二種的code吧</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q[<span class="number">26</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> n,ansl,ansr,l,r,ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"><span class="keyword">while</span>(q[i].<span class="built_in">size</span>())</span><br><span class="line">q[i].pop();</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">q[s[i]-<span class="string">'a'</span>].push(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].empty())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"not found\n"</span>;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ok)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">ansl=l=<span class="number">0</span>;</span><br><span class="line">r=q[<span class="number">0</span>].front();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">r=<span class="built_in">max</span>(r,q[i].front());</span><br><span class="line">ansr=r;</span><br><span class="line">ans=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(r&lt;n)&#123;</span><br><span class="line">l++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(q[i].<span class="built_in">size</span>()&amp;&amp;q[i].front()&lt;l)</span><br><span class="line">q[i].pop();</span><br><span class="line"><span class="keyword">if</span>(q[i].empty())&#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">r=<span class="built_in">max</span>(r,q[i].front());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ok)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(r-l+<span class="number">1</span>&lt;ans)&#123;</span><br><span class="line">ans=r-l+<span class="number">1</span>;</span><br><span class="line">ansr=r;</span><br><span class="line">ansl=l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=ansl;i&lt;=ansr;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 字串 </tag>
            
            <tag> 爬行法 </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1464</title>
      <link href="//TIOJ-1464.html"/>
      <url>//TIOJ-1464.html</url>
      
        <content type="html"><![CDATA[<h1 id="1464-Hammming-Code"><a href="#1464-Hammming-Code" class="headerlink" title="1464 . Hammming Code"></a>1464 . Hammming Code</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1464" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1464</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><img src="/images/TIOJ-1464a.jpg" alt=""></p><p>憨明碼(Hammming Code)是一種你精心研發，全新的偵錯與更正技術！</p><p>透過憨明碼，我們可以找到從遠方傳送過來的資料找出要如何更正資料。</p><p>現在你得到了一串二進位資料，但你覺得這資料可能有點問題，</p><p>所以你透過憨明碼得知了正確的資料應該為何，因此想要把它更正</p><p>雖然你很強，但你的機器卻很弱，只能將目前的資料中連續 $m$ 個位元反轉，</p><p>而每次操作都會耗費你家的電力，所以你希望能操作越少次越好！</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>給你兩個長度為$n$的$01$序列，你每次可以反白連續$m$個位元，求最少反轉次數使兩個序列相等</p><p>首先我們可以知道反轉的順序不影響，那就從頭往後掃，如果不符合就從當前位置反轉$m$個，可是這樣複雜度是$O(mk)$，那我們就可以想到BIT做區間加值單點查詢，反轉$[l,r]$等於把$[l,r]$都加上或減掉$1$(反正$\mod 2$就一樣了)，總複雜度$O(nlogn)$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s,t;</span><br><span class="line"><span class="keyword">int</span> n,m,<span class="built_in">bit</span>[<span class="number">1000010</span>],cnt,i;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(pos&lt;=n)&#123;</span><br><span class="line"><span class="built_in">bit</span>[pos]++;</span><br><span class="line">pos+=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pos&gt;<span class="number">0</span>)&#123;</span><br><span class="line">ans+=<span class="built_in">bit</span>[pos];</span><br><span class="line">pos-=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(;i+m&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((s[i]+query(i+<span class="number">1</span>))%<span class="number">2</span>!=t[i]%<span class="number">2</span>)&#123;</span><br><span class="line">add(i+<span class="number">1</span>);</span><br><span class="line">add(i+m+<span class="number">1</span>);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((s[i]+query(i+<span class="number">1</span>))%<span class="number">2</span>!=t[i]%<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"No Way!!"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> BIT </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1443</title>
      <link href="//TIOJ-1443.html"/>
      <url>//TIOJ-1443.html</url>
      
        <content type="html"><![CDATA[<h1 id="1443-遞迴問題"><a href="#1443-遞迴問題" class="headerlink" title="1443 . 遞迴問題"></a>1443 . 遞迴問題</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1443" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1443</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有一天，你撿到了一張神秘的紙張，</p><p><img src="/images/TIOJ-1443a.gif" alt=""></p><p>（註： $[$ $]$ 代表高斯符號）<br>（註：卡恩之力為全地球、不，全宇宙最最強大的力量。）</p><p>為了追求『卡恩之力』，你絞盡腦汁，但卻想不出來</p><p>所以你簡化了一下問題，改成求$F(0)$～$F(n)$之中的最大值。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這題高一就看過了，Andrew Yang一眼就知道是在求$\log$，也很快地發現這是大數$\log$OAO，噁心破表直接放棄</p><p>今天又看到，本來想用大數模板處理的，結果因為刻得很痛苦就去查python的$\log$了，然後…就AC了OAO</p><p>這應該是這個部落格最短的code了= =”</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(math.floor(math.log(int(input())+<span class="number">1</span>,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 數學 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1441</title>
      <link href="//TIOJ-1441.html"/>
      <url>//TIOJ-1441.html</url>
      
        <content type="html"><![CDATA[<h1 id="1441-萬里長城"><a href="#1441-萬里長城" class="headerlink" title="1441 . 萬里長城"></a>1441 . 萬里長城</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1441" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1441</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><img src="/images/TIOJ-1441a.jpg" alt=""></p><p>你去過萬里長城嗎？</p><p>秦始皇三十三年（前$214$年），秦始皇派大將蒙恬率領三十萬人北逐匈奴，佔據河套，並修築長城。</p><p>「秦已併天下，乃使蒙恬將三十萬眾北逐戎狄，收河南。築長城，因地形，用制險塞，起臨洮，至遼東，延袤萬餘裏，於是渡河，據陽山，逶蛇而北。暴師於外十餘年。」（《史記·蒙恬列傳》）<br>秦長城把過去秦、趙、魏、燕長城連接起來，從臨洮到遼東的綿延萬里，從此始有「萬里長城」之稱。</p><p>秦長城可大致分為西段和北段。西段起於今甘肅省岷縣，循洮河北至臨洮縣，經定西縣向東北至寧夏固原縣、甘肅環縣、陝西靖邊、橫山、榆林、神木，然後向北折至今內蒙古托克托南，抵黃河南岸。<br>北段即黃河以北的長城沿陰山西段的狼山，向東至大青山北麓，再向東經今內蒙集寧、興和至河北尚義，再向東北經今河北張北、圍場，再向東經撫順、本溪後向東南，終於朝鮮清川江入海處。</p><p>在修築北方長城的同時，原諸侯國間用以「互防」的長城被拆毀：<br>「皇帝奮威，德並諸侯，初一泰平。墮壞城郭，決通川防，夷去險阻。」（《史記·秦始皇本紀》）<br>秦長城對於抵禦匈奴的騷擾，保障中原生產和生活的安定，起了重要的作用。</p><p>秦始皇為了修築長城動用了$30$萬人，創造了人類建築史上的奇跡。</p><p>這一繁重的修築工程，也給當時的人們帶來了極大的痛苦，孟姜女的故事便來源於此。<br>現在臨洮附近，陰山、大青山一線，都有秦長城遺跡殘存。</p><p>回到那個時代，觀察到萬里長城的特色就是城牆一側總是一高一低的。</p><p>而你就是建造長城的工程師，你希望你造的城牆越長越好，而建造城牆的建材是石頭，每塊石頭可能有不同的高度。</p><p>但是供應石頭的廠商非常討厭，他每送一塊石頭就會問你要不要買，如果你不買，那塊就永遠不會再賣給你。</p><p>而秦始皇更討厭，他規定你一買一塊石頭就要馬上用，而且一定要按照購買的順序建造。</p><p>你透過一些內部的管道，得知廠商即將供應給你的石頭高度的順序，你能建造出多長的城牆呢？</p><p>有幾點可能要注意一下：</p><ol><li>石頭不能疊起來，也不能躺下來，不然間隔的接縫會不整齊，秦始皇會不開心，然後把你『咻碰』！</li><li>一定要滿足一塊高一塊低的方式，不然秦始皇會不開心，然後把你『咻碰』！</li><li>城牆的兩側，一定要是比旁邊那塊還高，不然城牆會很醜，使得秦始皇不開心，然後把你『咻碰』！</li><li>這家廠商相當的優質（因為不優質的話，秦始皇會不開心，然後把他『咻碰』！），每塊石頭的長寬都是一單位，只有高度不均。</li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>第一眼覺得是LIS，對於每個值，維護以他為結尾最長的W形或M形序列(就是下一步要往上還是往下)，然後仿照LIS的做法做</p><p>後來發現一個很greedy的性質，就是如果現在的數字沒辦法接在目前最長的序列之後，那就用它把結尾換掉顯然比較好，然後就沒了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a,w=<span class="number">1</span>,m=<span class="number">0</span>,v,o;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a;</span><br><span class="line">v=o=a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(a&lt;v&amp;&amp;w+<span class="number">1</span>&gt;m)&#123;</span><br><span class="line">m=w+<span class="number">1</span>;</span><br><span class="line">o=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a&gt;o&amp;&amp;m+<span class="number">1</span>&gt;w)&#123;</span><br><span class="line">w=m+<span class="number">1</span>;</span><br><span class="line">v=a;</span><br><span class="line">&#125;</span><br><span class="line">o=<span class="built_in">min</span>(o,a);</span><br><span class="line">v=<span class="built_in">max</span>(v,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">max</span>(w,m<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1416</title>
      <link href="//TIOJ-1416.html"/>
      <url>//TIOJ-1416.html</url>
      
        <content type="html"><![CDATA[<h1 id="1416-Interactive-Game-of-Stone"><a href="#1416-Interactive-Game-of-Stone" class="headerlink" title="1416 . [Interactive] Game of Stone"></a>1416 . [Interactive] Game of Stone</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1416" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1416</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>你有玩過TIOJ1087的取石頭嗎？</p><p>現在有另外一個好玩的遊戲— 真。奇石頭</p><p>這個遊戲只有一堆石頭，而且一定是奇數個。</p><p>現在你與電腦輪流拿一或兩個石頭，直到拿完，最後手上石頭總數是奇數的人就贏了！</p><p>這是一個互動題，請你先引入標頭檔#include “lib1416.h”，然後就可以用這些函數了!</p><ul><li><p>int Initialize()：請先呼叫Initialize將石頭堆好，並且他會回傳石頭的數量</p></li><li><p>int Take_Stone(int a)：將石頭拿出a個，a只能是$1$或$2$，並且不能拿超過石頭的數量，如果有違法情形，會直接判定WA，取完之後系統會回傳給你他要取多少。</p></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>裸數學題</p><p>在數讀的時候看到就開始做了，弄了老半天沒結果石博允一拿到就做完了，塞博好電&gt; &lt;</p><p>這題在$4n+1$是先手必勝，$4n+3$後手必勝，從小數字做上來就有了，先手必勝的策略是拿掉兩個之後模仿對手的動作，直到剩不到三個時拿掉$1$個就有了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib1416.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n=Initialize(),a;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">  Take_Stone(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">5</span>)&#123;</span><br><span class="line">  Take_Stone(<span class="number">2</span>);</span><br><span class="line">  Take_Stone(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  a=Take_Stone(<span class="number">2</span>);</span><br><span class="line">  n-=a+a+<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span>(n&gt;<span class="number">3</span>)&#123;</span><br><span class="line">    a=Take_Stone(a);</span><br><span class="line">    n-=a&lt;&lt;<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Take_Stone(a);</span><br><span class="line">  Take_Stone(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 數學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1411</title>
      <link href="//TIOJ-1411.html"/>
      <url>//TIOJ-1411.html</url>
      
        <content type="html"><![CDATA[<h1 id="1411-Ragnarok"><a href="#1411-Ragnarok" class="headerlink" title="1411 . Ragnarök"></a>1411 . Ragnarök</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1411" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1411</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>諸神的黃昏（Ragnarök）是北歐神話的預言中註定要降臨的末日劫難，也是日爾曼民族的神話與其他民族神話最富悲劇特色的區別。</p><p>不同其他神話傳說用大篇幅敘述神對世界的創造，北歐神話用最濃重的筆墨描繪了包括諸神在內都必須面對的宇宙毀滅。</p><p>經過研究你得知還是有解決的辦法！那就是維護天神間的平衡。</p><p>北歐諸神神座的位置相當有趣，是呈一條長鏈狀。</p><p>諸神又分為三種：天神、冥神以及土地神。</p><p>而諸神的黃昏則是因為天神與冥神之間的數量不平衡所引發。</p><p>你發現最後的方法就是保留某區段的神明，使其區段保持平衡，但相對的必須捨棄掉剩下的那些神明。</p><p>又因為能量的關係，你最多只能保留一區段的神明。</p><p>現在諸神的黃昏來了！你最多能拯救多少神明呢？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>給你一個序列，問你可以正負元素數量相等的區間長度的最大值</p><p>我的作法是先把正的全部變成$1$，負的全部變成$-1$，之後考慮他的前綴$a_i$，若$a_l=a_r$，表示$(l,r]$的區間和是$0$，所以對於每個前綴去記錄他第一次出現的位置就可以應付了</p><p>如果偷懶可以用<code>map</code>，可是事實上你會發現可能的前綴只有$10^6$個，所以開個陣列也行，但是因為前綴有正有負所以需要做奇怪的處理</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a,b,maxu,m[<span class="number">3000000</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3000000</span>;i++)</span><br><span class="line">            m[i]=<span class="number">0</span>;</span><br><span class="line">        maxu=a=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">            <span class="keyword">if</span>(b&gt;<span class="number">0</span>)</span><br><span class="line">                a++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(b&lt;<span class="number">0</span>)</span><br><span class="line">                a--;</span><br><span class="line">            <span class="keyword">if</span>(a==<span class="number">0</span>)</span><br><span class="line">                maxu=<span class="built_in">max</span>(maxu,i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(m[a+<span class="number">1000010</span>]==<span class="number">0</span>)</span><br><span class="line">                m[a+<span class="number">1000010</span>]=i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                maxu=<span class="built_in">max</span>(maxu,i-m[a+<span class="number">1000010</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;maxu&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1408</title>
      <link href="//TIOJ-1408.html"/>
      <url>//TIOJ-1408.html</url>
      
        <content type="html"><![CDATA[<h1 id="1408-我很忙"><a href="#1408-我很忙" class="headerlink" title="1408 . 我很忙"></a>1408 . 我很忙</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1408" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1408</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>什麼叫做「很忙」呢？</p><p>簡單來說，對於某一段時間(從$A_i$秒到$B_i$秒時間點)來說，如果我至少有整整<!--石化--> $C_i$ 秒鐘是保持忙碌的，那麼我就很忙。如下圖：</p><p><img src="/images/TIOJ-1408a.png" alt=""></p><p>我想要保持「很忙」的狀態，可是我又不想要那麼忙，給定以上的一些「很忙」的條件的話，我最少要忙多久呢？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>給你$n$個時間段，要求每個時間段中至少有$c$個時刻是忙碌的，求最少的忙碌時間總和</p><p>可以顯然地想到一個greedy解就是每次取右界最左邊的要求，並且從右界開始往左填忙碌的時間填到符合要求</p><p>不過他有趣的地方就是一個區間可能已經有些部分被填了，所以不會是剛好由右到左填$c$個，開始填之前要先知道現在的時間有沒有被填過+要求的區間只需要在填幾格，而第二項可以用BIT在$O(nlogn)$做出來，但第一項我就沒頭緒了，理論上因為他填的沒有單調性，所以每次最差必須要$O(n)$？那這複雜度就爛了吧？求各位路過的大神解釋&gt; &lt;</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,<span class="built_in">bit</span>[<span class="number">100010</span>],maxu,sum,busy[<span class="number">100010</span>];</span><br><span class="line">pair&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; p[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(pos&lt;=maxu)&#123;</span><br><span class="line"><span class="built_in">bit</span>[pos]++;</span><br><span class="line">pos+=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pos&gt;<span class="number">0</span>)&#123;</span><br><span class="line">ans+=<span class="built_in">bit</span>[pos];</span><br><span class="line">pos-=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line">maxu=sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p[i].second&gt;&gt;p[i].first.first&gt;&gt;p[i].first.second;</span><br><span class="line">p[i].second++;</span><br><span class="line">p[i].first.first++;</span><br><span class="line">maxu=<span class="built_in">max</span>(maxu,p[i].first.first);</span><br><span class="line">&#125;</span><br><span class="line">sort(p,p+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxu;i++)</span><br><span class="line"><span class="built_in">bit</span>[i]=busy[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j=p[i].first.second-(query(p[i].first.first)-query(p[i].second));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=p[i].first.first;k&gt;p[i].second&amp;&amp;j&gt;<span class="number">0</span>;k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(!busy[k])&#123;</span><br><span class="line">add(k);</span><br><span class="line">busy[k]=<span class="number">1</span>;</span><br><span class="line">sum++;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> BIT </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1398</title>
      <link href="//TIOJ-1398.html"/>
      <url>//TIOJ-1398.html</url>
      
        <content type="html"><![CDATA[<h1 id="1398-霍夫快編碼"><a href="#1398-霍夫快編碼" class="headerlink" title="1398 . 霍夫快編碼"></a>1398 . 霍夫快編碼</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1398" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1398</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>是的…從前從前，有個人叫做霍夫…<br>自從他學了神秘的編碼學以後，他開始不誤正業了(誤)！<br>他把所有他看到的東西通通編了碼…</p><p>是的！你的任務就是要改變霍夫快編碼的壞習慣，要搶先一步，在他把測資通通編碼之前先把它解決掉！<br>給你一篇文章中$n$種字元出現的次數，現在採用「三進位編碼」，也就是這$n$種字元每一種可以被編為包含$0,1,2$的序列。<br>相同地，每一個字元編碼後，都不可以是其他編碼後字元的前綴字串(prefix)，例如 $012$ 與 $01210$ 是不合法的編碼方式。<br>請問將這篇文章以最佳方式編碼後的文章長度為何？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>霍夫曼編碼，只是這題是三元樹</p><p>想法也顯然，每次抓pq前三個融合起來塞回pq，答案就是手續費的總和</p><p>不過如果我們考慮深度最深的那些點，會發現有兩種case：</p><ol><li><p>$n$是奇數：那最深的點有$3$個，正常做沒問題</p></li><li><p>$n$是偶數：那最深的點只有$2$個，所以第一次融合的時候只要取兩個起來合，可以選擇第一次融合時特判或見到偶數就補$0$進去</p></li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,a;</span><br><span class="line">priority_queue&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;,greater&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; pq;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line"><span class="keyword">while</span>(pq.<span class="built_in">size</span>())</span><br><span class="line">pq.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">pq.push(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">pq.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(pq.<span class="built_in">size</span>()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">n=pq.top();</span><br><span class="line">pq.pop();</span><br><span class="line">n+=pq.top();</span><br><span class="line">pq.pop();</span><br><span class="line">n+=pq.top();</span><br><span class="line">pq.pop();</span><br><span class="line">a+=n;</span><br><span class="line">pq.push(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> priority_queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1218</title>
      <link href="//TIOJ-1218.html"/>
      <url>//TIOJ-1218.html</url>
      
        <content type="html"><![CDATA[<h1 id="1218-取因數遊戲"><a href="#1218-取因數遊戲" class="headerlink" title="1218 . 取因數遊戲"></a>1218 . 取因數遊戲</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1218" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1218</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有一堆$n$個石頭，每一次可以拿「現在石頭數的因數」這麼多個石頭。取走最後一個石頭的人輸。</p><p>給你$n$的值，請問先手有無必勝策略？</p><p>此外，如果規定「石頭數超過$1$的時候，不能一次全部拿走。同樣每次只能取因數個石頭，但是取走最後一個石頭的人勝。」</p><p>給你$n$的值，請問先手有無必勝策略？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>一看「每列長度不會超過$10000$」就知道是大數學，放棄<code>int</code>、放棄<code>long long</code>、放棄模擬、放棄建表，一定得$O(1)$求解</p><p>第一小題比較顯然，可以發現答案是偶數先手必勝，奇數後手必勝，因為奇數拿完一定會變偶數，偶數的話我就拿掉$1$變成奇數，這樣回來還是偶數，總有一天我會拿到$2$，然後就贏了</p><p>第二小題就稍微麻煩一點了，先手動建表就會發現$1$先手必勝、$2$先手必敗、$3$先手必勝、$4$先手必勝，然後我們因為對於所有的奇數，拿過一次之後會變成偶數，偶數的話只要拿掉$1$就可以變成奇數，而當你從$5$以上的奇數開始拿，下一步一定不可能變成$2$，所以奇數先手必敗，偶數先手必勝，但是$1$～$3$要特判</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">reverse(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">while</span>(s.<span class="built_in">size</span>()&amp;&amp;s.back()==<span class="string">'0'</span>)</span><br><span class="line">s.pop_back();</span><br><span class="line"><span class="keyword">if</span>(!s.<span class="built_in">size</span>())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">reverse(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">if</span>((s.back()-<span class="string">'0'</span>)%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"WIN "</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"LOSE "</span>;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">"1"</span>||s==<span class="string">"3"</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"WIN\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">"2"</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"LOSE\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((s.back()-<span class="string">'0'</span>)%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"WIN\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"LOSE\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 數學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1130</title>
      <link href="//TIOJ-1130.html"/>
      <url>//TIOJ-1130.html</url>
      
        <content type="html"><![CDATA[<h1 id="1130-Dark-Kingdom-II"><a href="#1130-Dark-Kingdom-II" class="headerlink" title="1130 . Dark Kingdom II"></a>1130 . Dark Kingdom II</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1130" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1130</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Dark Kingdom 決定以有瞬間傳送效果的黑暗傳送路徑建立新的運輸系統。這個法術有破壞地表的副作用，所以 Dark Kingdom 的法術工程師要把所有 $n$ 個城市用環狀的路徑串接起來。</p><p><img src="/images/TIOJ-1130a.png" alt=""></p><p>如圖，在這個傳送系統完成之後，彼得要從 $3$ 到 $2$（藍色的線），雖然要傳送 $5$ 次，但是還是比騎馬直接過去快多了，不過彼得覺得走這樣一趟就要付 $5$ 元實在是很貴。有一天彼得在傳送的時候睡著了，他醒過來的時候剛好在 $2$，只是不知道已經環遊 Dark Kingdom 多少次了；但是當他要付錢離開傳送站的時候發現還是只要付 $5$ 元！<br>聰明的彼得發現，進傳送站時拿的水晶，不是紀錄傳送了幾次，而是從哪個城進站。另一天彼得進入 $3$ 的傳送站時，遇到了一個要從 $1$ 到 $4$（紅線）的朋友，他就提議兩個人交換水晶，結果兩個人竟然都只要付 $1$ 元（綠線）！</p><p>印證了自己的想法之後，彼得就開始號召了 $m$ 個人參加這個行動，你的工作是寫一個程式，幫彼得計算他可以幫大家省多少錢。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>可以想到一個顯然的greedy解，就是對於每一個起點搜最近的終點，看起來似乎要$O(nlogn)$做二分搜，然後就會發現使用爬行法可以做到$O(n)$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tmp,ans,s[<span class="number">30010</span>],e[<span class="number">30010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s[i]&gt;&gt;e[i];</span><br><span class="line">tmp=e[i]-s[i];</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;<span class="number">0</span>)</span><br><span class="line">tmp+=n;</span><br><span class="line">ans+=tmp;</span><br><span class="line">&#125;</span><br><span class="line">sort(e,e+m);</span><br><span class="line">sort(s,s+m);</span><br><span class="line">tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(e[tmp]&lt;s[i]||e[tmp]==<span class="number">-1</span>)&#123;</span><br><span class="line">tmp++;</span><br><span class="line"><span class="keyword">if</span>(tmp&gt;=m)&#123;</span><br><span class="line">tmp=<span class="number">0</span>;</span><br><span class="line">s[i]-=n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans-=e[tmp]-s[i];</span><br><span class="line">e[tmp]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> greedy </tag>
            
            <tag> 爬行法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1410</title>
      <link href="//TIOJ-1410.html"/>
      <url>//TIOJ-1410.html</url>
      
        <content type="html"><![CDATA[<h1 id="1410-Comiket"><a href="#1410-Comiket" class="headerlink" title="1410 . Comiket"></a>1410 . Comiket</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1410" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1410</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Comic Market （コミックマーケット），是由Comic Market準備會舉辦的日本以至全球最大型的同人誌即賣會。略稱Comiket（コミケ）或 CM。</p><p>八月舉行的Comic Market會叫夏コミ而十二月舉行的則叫作冬コミ。</p><p>一直以來，Comic Market均是業餘漫畫愛好者將他們的二次創作製作成的同人誌售賣的地方。一般而言這些人或者「同人組織」（サークル）都是以非牟利方式售賣這些同人誌。但實際上，Comic Market也是這些具有才能的業餘漫畫愛好者或者「同人組織」建立知名度的地方，一些現時知名的漫畫家，由初期柴門文、高橋留美子到近期的CLAMP也是在Comic Market被人發掘。部份的「同人組織」（如TYPE-MOON）又由於實在太受歡迎，在Comic Market甚至能賺到足夠金錢去公司化。</p><p>隨著Comic Market的知名度越來越大，現時有一些職業漫畫家以及遊戲公司（一般而言售賣美少女遊戲的公司較多）也會參加Comic Market。以「公司名義」參加的機構會被安置到特定的場館。</p><p>雖然 Comic Market 是以漫畫、動畫的同人作品為主，但其實一些鐵道愛好者，哥德蘿莉衣服的設計師，業餘歌手甚至業餘畫家都會到 Comic Market 發售他們的作品。</p><p>在東京國際展示場的場外設有Cosplay區可供Cosplay愛好者拍照。</p><p>近年來參加人數不斷增加，售賣的攤位數目達到$35,000$個（還在不斷上升當中）。而由於每次有意在Comic Market擺設攤位的人或團體實在太多，故需進行抽簽。而入場人數每次舉行（通常是三日）均會達到$550,000$人次以上（還在不斷上升當中）。</p><p>參加者遍及全部年齡層但以高中畢業至三十多歲的人為主。近來專程來Comic Market參觀，甚至設攤售賣其同人誌的外國人亦不在少數。</p><p>因為人數實在太多了，所以租借場地成了一個大問題，主辦單位為此傷透了腦筋，場地太大就顯得浪費（成本問題），場地太小又無法容納那麼多人，於是透過了某強大的組織得知了所有會參加的人的『到訪時間』以及『離開時間』，但也因為人數太多了，所以無法輕易從這些資料看出最多可能會有多少人同時出現在會場中，你能幫助他們嗎？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>區間加值求全域最大值，看起來可以線段樹BIT之類的，不過因為是離線加上需要離散化，我直接用了<code>priority_queue</code></p><p>其實就我的作法來說也可以直接<code>sort</code>，不過我還是習慣<code>priority_queue</code>，就像我喜歡Disjoint set一樣</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; p;</span><br><span class="line"><span class="keyword">int</span> n,a,b,maxu,c,t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">p.push(&#123;a,<span class="number">1</span>&#125;);</span><br><span class="line">p.push(&#123;b+<span class="number">1</span>,<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">maxu=c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!p.empty())&#123;</span><br><span class="line">c+=p.top().second;</span><br><span class="line">t=p.top().first;</span><br><span class="line">p.pop();</span><br><span class="line"><span class="keyword">if</span>(p.top().first!=t)</span><br><span class="line">maxu=<span class="built_in">max</span>(maxu,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxu&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> priority_queue </tag>
            
            <tag> 離散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1240</title>
      <link href="//TIOJ-1240.html"/>
      <url>//TIOJ-1240.html</url>
      
        <content type="html"><![CDATA[<h1 id="1240-LIS-but-not-LIS"><a href="#1240-LIS-but-not-LIS" class="headerlink" title="1240 . LIS but not LIS"></a>1240 . LIS but not LIS</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1240" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1240</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給你一個序列, 請你求出LIS</p><p>等等！你以為我會叫你求Longest Increasing Subsequence嗎？<br>天下才沒有這種好事咧！</p><p>我要你求的是Least Increasing Subsequences！</p><p>你該不會又天真的認為這是”最短遞增子序列吧”，那你又錯了！<br>我雖然善良但也沒有這麼善良</p><p>你的任務，事實上，是把這個序列分成其若干個子序列<br>其中每一個都是嚴格遞增子序列</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>第一眼就可以想到$O(n^2)$greedy，對於每個序列的結尾我去找之後第一個比他大的當作新的結尾</p><p>然後就可以優化出$O(nlogn)$的<code>multiset</code>解，做法是開一個<code>multiset</code>記錄目前所有序列的結尾，比這些結尾都小就開一個新序列，否則就接在比自己小的結尾中最大的後面</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        <span class="keyword">auto</span> tmp=s.lower_bound(a);</span><br><span class="line">        <span class="keyword">if</span> (tmp!=s.<span class="built_in">begin</span>()) &#123;</span><br><span class="line">            s.erase(--tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        s.insert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> greedy </tag>
            
            <tag> multiset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1202</title>
      <link href="//TIOJ-1202.html"/>
      <url>//TIOJ-1202.html</url>
      
        <content type="html"><![CDATA[<h1 id="1202-重疊的天際線"><a href="#1202-重疊的天際線" class="headerlink" title="1202 . 重疊的天際線"></a>1202 . 重疊的天際線</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1202" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1202</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>地平線上有許多房子，而這些房子在夕陽的照射之下形成有趣的輪廓，我們稱之為天際線(Skyline)。</p><p>為了方便起見，你可以假設所有的房子都是一個位在2D平面上的矩形，並且有一條邊貼在這個假想2D平面上的X軸。</p><p>一棟建築可以用三元數組($L_i$,$H_i$,$R_i$)來表示，依序代表該建築物的左界座標、高度、右界座標。下方左圖中的八棟建築就是用此方法表示就是$(1,11,5), (2,6,7), (3,13,9), (12,7,16), (14,3,25), (19,18,22), (23,13,29), (24,4,28)$。</p><p><img src="/images/TIOJ-1202a.gif" alt=""></p><p>一個天際線也可以用類似的「X-遞增序列」表示出來，例如上面的八棟建築合併之後上方右圖的天際線可表示為：<br>$(1, 11, 3, 13, 9, 0, 12, 7, 16, 3, 19, 18, 22, 3, 23, 13, 29, 0)$</p><p>請你寫一個程式，給你這些房子的位置，請你把它們形成的天際線描述出來。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>包得很好的資結題</p><p>看起來可能會想要線段樹什麼的硬弄，不過其實沒這個必要，我的作法是開一個<code>priority_queue</code>紀錄每個建築開始和結束的時間，然後開一個<code>multiset</code>紀錄現有的建築高度，如果現有的高度最大值和前一次輸出不一樣就輸出現在的時間和高度</p><p>值域蠻大的感覺不能把<code>priority_queue</code>換成陣列，搞不好可以換成<code>map&lt;vector&gt;</code>（<code>map</code>常數那麼大真的會比較快嗎=ㄦ =）？</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt;,greater&lt;pair&lt;<span class="keyword">int</span>,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt;&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,l,h,r,bf;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;h&gt;&gt;r;</span><br><span class="line">p.push(&#123;l,&#123;<span class="number">1</span>,h&#125;&#125;);</span><br><span class="line">p.push(&#123;r,&#123;<span class="number">-1</span>,h&#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">bf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!p.empty())&#123;</span><br><span class="line"><span class="keyword">auto</span> a=p.top();</span><br><span class="line">p.pop();</span><br><span class="line"><span class="keyword">if</span>(a.S.F==<span class="number">1</span>)</span><br><span class="line">s.insert(a.S.S);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s.erase(s.<span class="built_in">find</span>(a.S.S));</span><br><span class="line"><span class="keyword">if</span>(!p.empty()&amp;&amp;a.F==p.top().F)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(s.empty())</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.F&lt;&lt;<span class="string">" 0 "</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(*(--s.<span class="built_in">end</span>())!=bf)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.F&lt;&lt;<span class="string">' '</span>&lt;&lt;*(--s.<span class="built_in">end</span>())&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">bf=*(--s.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> priority_queue </tag>
            
            <tag> multiset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1194</title>
      <link href="//TIOJ-1194.html"/>
      <url>//TIOJ-1194.html</url>
      
        <content type="html"><![CDATA[<h1 id="1194-搶因數遊戲"><a href="#1194-搶因數遊戲" class="headerlink" title="1194 . 搶因數遊戲"></a>1194 . 搶因數遊戲</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1194" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1194</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>「事情發生在跑跑卡恩車大賽後的幾個月…(請參考TIOJ-1022)，經過了跑跑卡恩車大賽後，原本居住在上城的寒酸員外老姜跟原本居住在下城強大的科學家老皮與老灝成為了好朋友，感情好到常常聚在一起打賭（賭友是嗎？）」<br>— TIOJ1162，小氣又有錢的老姜</p><p>經過了許多次聚會後，他們已經把所有能賭的東西幾乎都賭過一遍了。於是他們決定要每個星期由一個人想一種新的遊戲方法來打賭。</p><p>這次輪到老皮想規則，他想到了兩個遊戲規則：搶倍數遊戲和搶因數遊戲。兩個遊戲的玩法頗為類似，都是有$1$~$n$的數，雙方每次輪流拿掉一個數，當拿掉一個數的時候要同時拿掉它的所有倍數或所有因數(取決於是哪一套規則)，拿完的人就贏了。</p><p>沒想到他剛很高興的把規則拿給老灝看，老灝就發現了搶倍數遊戲只要剛開始拿$1$就贏了……但是搶因數遊戲他們仍然找不出必勝的方法，於是便委託聰明的你幫忙寫個程式判斷哪一方有必勝策略。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>數學梗題</p><p>答案是不管$n$是多少都先手必勝，因為我們可以用反證法，首先我們證如果有一個後手必勝的策略，那他顯然不包含拿掉$1$這個步驟，因為不管先手拿哪一個$1$都會被拿掉，所以後手絕對無法做這件事；然後假設$n=k$時是後手必勝，那先手就把$1$拿掉，換成對方先手我方使用後手必勝的戰略，由於此戰略不包含把$1$拿掉，所以是可執行的，那先手也贏了</p><p>雖然很神奇可是應該可以用小測資看出來，這故事告訴我們構小測資的重要(?)</p><p>不過這題沒有給$n$的範圍，看起來會爆<code>long long</code>，反正$n$一點都不重要所以拿<code>string</code>去吃它就好了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s,t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s&amp;&amp;s!=<span class="string">"0"</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 數學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1188</title>
      <link href="//TIOJ-1188.html"/>
      <url>//TIOJ-1188.html</url>
      
        <content type="html"><![CDATA[<h1 id="1188-鬼腳圖"><a href="#1188-鬼腳圖" class="headerlink" title="1188 . 鬼腳圖"></a>1188 . 鬼腳圖</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1188" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1188</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>大家有沒有遇過一群人無法馬上做下決定的事情呢？<br>例如今天晚餐要吃什麼、跨年要去哪裡狂歡、晚餐錢要誰出之類的問題…</p><p>猜拳已經落伍啦！現在最流行的(?)是鬼腳圖(好啦，其實大家一定玩過…)</p><p>曾經是高中同學的三毅、阿正、兩瑋、韋衖與小雷五個人，在美好的$2007$寒假，決定辦一個同學會。<br>但是需要進行的準備事項有五：場地、活動、聯絡、開會、茶點。<br>每個人做這五項工作都沒問題，但還是需要分配一下，於是他們畫了一張這樣的圖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1   2   3   4   5</span><br><span class="line">|   |   |   |   |</span><br><span class="line">+---+   +---+   |</span><br><span class="line">|   |   |   |   |</span><br><span class="line">|   +---+   |   |</span><br><span class="line">|   |   |   +---+</span><br><span class="line">+---+   |   |   |</span><br><span class="line">|   |   |   |   |</span><br><span class="line">+---+   |   |   |</span><br><span class="line">|   |   |   |   |</span><br><span class="line">A   B   C   D   E</span><br></pre></td></tr></table></figure><p>五個人A,B,C,D,E沿著各自的線走，遇到岔路就一定要轉彎，而且不能往下走，最後一定會走到$1,2,3,4,5$五件工作其中之一。</p><p>阿正驚訝的發現五個人走到的五件工作都不會重複！</p><p>今年是$2008$年，這次的同學會由於擴大舉辦，總共有$N$個人要負責$N$件事情。</p><p>阿正如法炮製畫了一個類似的圖，但是由於太過複雜，阿正沒辦法確定到底每個人該做什麼事情，於是他請德育要求時弦麻煩球主商請阿棠請託蛋蛋有請川弘告訴…(族繁不急被宰)…蕃茄拜託你，來寫一個程式來求出每個人該負責的工作。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>我覺得這題還蠻有趣的</p><p>給你一個鬼腳圖，上方編號$1$～$n$，求走到最下面之後的編號序列</p><p>實作也很簡單，從上面往下掃，如果兩條直線有相連就把他們的編號換過來，$O(nm)$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> n,m,arr[<span class="number">200</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;(n||m))&#123;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">arr[i]=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;m&gt;<span class="number">0</span>;m--)&#123;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">4</span>*i]==<span class="string">'+'</span>)&#123;</span><br><span class="line">swap(arr[i],arr[i+<span class="number">1</span>]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1355</title>
      <link href="//TIOJ-1355.html"/>
      <url>//TIOJ-1355.html</url>
      
        <content type="html"><![CDATA[<h1 id="1355-河內之塔-蘿莉塔"><a href="#1355-河內之塔-蘿莉塔" class="headerlink" title="1355 . 河內之塔-蘿莉塔"></a>1355 . 河內之塔-蘿莉塔</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1355" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1355</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>傳說在古老的印度，有一座神廟，據說它是宇宙的中心。</p><p>在廟宇中放置了一塊上面插有三根長木釘的木板，在其中的一根木釘上，從上至下被放置了$64$片直徑由小至大的圓環形金屬片。</p><p>古印度教的天神指示祂的僧侶們將$64$片的金屬片移至三根木釘中的其中一根上。</p><p>規定在每次的移動中，只能搬移一片金屬片，並且在過程中必須保持金屬片由上至下是直徑由小至大的次序，也就是說不論在那一根木釘上，圓環形的金屬片都是直徑較小的被放在上層。</p><p>直到有一天，僧侶們能將$64$片的金屬片依規則從指定的木釘上全部移動至另一根木釘上，那麼，世界末日即隨之來到，世間的一切終將被毀滅，萬物都將至極樂世界。</p><p>僧侶極希望能早點結束這繁重的工作，於是來求助於你，要如何才能有效率的進行這工作呢？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>我是在清大才知道這是經典遞迴題@@</p><p>move(n,x,y)表示有$n$個盤子要從$x$移到$y$，那麼顯然就是先把$n-1$個移到不是$x$也不是$y$的那個那根柱子，然後把一個從$x$移到$y$，之後再把那$n-1$個從另一根移回來</p><p>然後如果只有一個的就可以直接輸出了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">c++;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"#"</span>&lt;&lt;c&lt;&lt;<span class="string">" : move the dish from #"</span>&lt;&lt;x&lt;&lt;<span class="string">" to #"</span>&lt;&lt;y&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">move</span>(n<span class="number">-1</span>,x,<span class="number">6</span>-x-y);</span><br><span class="line"><span class="built_in">move</span>(<span class="number">1</span>,x,y);</span><br><span class="line"><span class="built_in">move</span>(n<span class="number">-1</span>,<span class="number">6</span>-x-y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">move</span>(n,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 經典題 </tag>
            
            <tag> 遞迴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1291</title>
      <link href="//TIOJ-1291.html"/>
      <url>//TIOJ-1291.html</url>
      
        <content type="html"><![CDATA[<h1 id="1291-G-N-箱M-球"><a href="#1291-G-N-箱M-球" class="headerlink" title="1291 . G.N 箱M 球"></a>1291 . G.N 箱M 球</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1291" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1291</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>$n$個相同的箱子要放入$m$個不同的球，問有幾種放法。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>剛考完排組段考就看到這題OAO</p><p>遞迴式不難推，令<code>dp[i][j]``表示$i$箱$j$球的放法數，那麼顯然有</code>dp[i][j]=dp[i][j-1]\times i+dp[i-1][j-1]`，因為她的前一步有可能是在$i$個箱子中隨便找一個放、或是自己放進一個空箱</p><p>然後我就WA了</p><p>原因是所求並不是<code>dp[n][m]</code>，而是<code>dp[1][m]+dp[2][m]+...+dp[n][m]</code>，因為剛剛說的是$i$箱都有球的狀況，但也可能有某些是空的，所以要把沒有每箱都有球的況狀加進去</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,dp[<span class="number">300</span>][<span class="number">300</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">200</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j&amp;&amp;j==<span class="number">1</span>)</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][j]=(dp[i][j<span class="number">-1</span>]*i+dp[i<span class="number">-1</span>][j<span class="number">-1</span>])%<span class="number">1000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">200</span>;j++)</span><br><span class="line">dp[i][j]=(dp[i][j]+dp[i<span class="number">-1</span>][j])%<span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;n)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[n][m]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> DP </tag>
            
            <tag> 數學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1268</title>
      <link href="//TIOJ-1268.html"/>
      <url>//TIOJ-1268.html</url>
      
        <content type="html"><![CDATA[<h1 id="1268-得分高手-Master"><a href="#1268-得分高手-Master" class="headerlink" title="1268 . 得分高手 (Master)"></a>1268 . 得分高手 (Master)</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1268" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1268</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>一個數字棋盤遊戲，一開始可在棋盤中任選一格為起點，並規定下一步只能選擇起點的右方或下方格子；選擇其中一個方向後，同樣只能自該選擇的格子選擇往右方或是下方的格子推進，依此類推繼續走下去，不能再回頭。每一個格子都有分數，選擇該格子就能取得上面的分數，但是分數有正得分也有負得分（扣分）。玩家可在任意時候決定不再繼續走，或是依規則走完所有能走的格子。以底下$3 \times 4$的棋盤為例，若選擇以第 $2$ 列第$1$行為起點，依序通過 $3 \rightarrow -1 \rightarrow 8 \rightarrow 6$，可得此棋盤最高可得分數 $16$。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-804-4</span><br><span class="line"></span><br><span class="line">3-1-93</span><br><span class="line"></span><br><span class="line">-286-1</span><br></pre></td></tr></table></figure><p>給定棋盤上每一格的分數，請寫一個程式來找出最高可得分數。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>第一眼看以為是經典dp題，然後就吃WA了</p><p>原來這題可以任選起點和終點QAQ</p><p>不過基本上長的還是一樣，任選起點就是dp式會變成<code>dp[i][j]=max(dp[i-1][j],dp[i][j-1],0)+v[i][j]</code>，依序對應到從上面走下來、從左邊走過來、拿自己當起點；任選終點就是從輸出右下角變成輸出所有人的max而已</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,j,n,m,p[<span class="number">3010</span>][<span class="number">3010</span>],maxu=<span class="number">-2147483648</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;p[i][j];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            p[i][j]=<span class="built_in">max</span>(<span class="built_in">max</span>(p[i<span class="number">-1</span>][j],p[i][j<span class="number">-1</span>]),<span class="number">0</span>)+p[i][j];</span><br><span class="line">            maxu=<span class="built_in">max</span>(p[i][j],maxu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1225</title>
      <link href="//TIOJ-1225.html"/>
      <url>//TIOJ-1225.html</url>
      
        <content type="html"><![CDATA[<h1 id="1225-數字合併"><a href="#1225-數字合併" class="headerlink" title="1225 . 數字合併"></a>1225 . 數字合併</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1225" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1225</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>黑板上有$n$個數字寫成一排，現在每次選擇兩個相鄰的數字，把比較小的那個數字擦掉(如果兩個數字一樣大，那麼擦掉任何一個都可以。)然而，這些步驟需要花費，這個花費恰好等於留下來的那個數字(比較大的那個)。</p><p>請問經過$n-1$次操作，黑板上會剩下的那個數字是多少？</p><p>你以為問題這麼簡單嗎？錯!</p><p>真正的問題是：</p><p>請問經過$n-1$次操作，黑板上會剩下最大的那個數字，所有操作方法中，最小總花費是多少？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>看值域就知道是某種$O(nlogn)$的greedy，然後你也會發現正確的greedy就是每次都刪掉最小的，理由是不管怎麼刪他的左右只會變大不會變小，所以等很久以後再刪掉絕對不會比較好</p><p>不過由於一個東西的左右會改變，像我這裡是用了兩個<code>array</code>來模仿<code>list</code>去維護每個人的左右在哪裡，不知道有沒有更好的方法？</p><p>喔然後最左邊和最右邊要好好維護，我是直接補inf上去</p><p>最後這題會爆<code>int</code>= =</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,v[<span class="number">1000010</span>],l[<span class="number">1000010</span>],r[<span class="number">1000010</span>],b,c;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v[i];</span><br><span class="line">l[i]=i<span class="number">-1</span>;</span><br><span class="line">r[i]=i+<span class="number">1</span>;</span><br><span class="line">p.push(make_pair(v[i],i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p.<span class="built_in">size</span>()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">b=p.top().second;</span><br><span class="line">p.pop();</span><br><span class="line"><span class="keyword">if</span>(l[b]==<span class="number">-1</span>)&#123;</span><br><span class="line">c+=v[r[b]];</span><br><span class="line">l[r[b]]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r[b]==n)&#123;</span><br><span class="line">c+=v[l[b]];</span><br><span class="line">r[l[b]]=n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(v[l[b]]&gt;v[r[b]])&#123;</span><br><span class="line">c+=v[r[b]];</span><br><span class="line">l[r[b]]=l[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">c+=v[l[b]];</span><br><span class="line">r[l[b]]=r[b];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> priority_queue </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1176</title>
      <link href="//TIOJ-1176.html"/>
      <url>//TIOJ-1176.html</url>
      
        <content type="html"><![CDATA[<h1 id="1176-Cows"><a href="#1176-Cows" class="headerlink" title="1176 . Cows"></a>1176 . Cows</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1176" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1176</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定一排牛(不是一牛排)每頭牛的高度，牠們只能往右平視或俯視，請問牠們分別能夠看到幾頭牛？</p><p>(如果兩頭牛的高度一樣，那麼左邊的牛的視野只能看到右邊的牛為止。)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>據說是某個經典題？</p><p>反正就是對於陣列的每一項，求她右邊第一個大於等於他的數的位置</p><p>方法就是維護一個遞減的<code>stack</code>，每次讀到一個數就看這個數和<code>stack</code>的尾巴誰比較大，如果這個數比較大那麼尾巴對應到的右界就是這個數了</p><p>不過我用<code>vector</code>實作就是了，理由是學姐說過用<code>stack</code>不如用<code>vector</code>，如果看起來不太顯明跟大家說聲抱歉</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a,arr[<span class="number">1000010</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a;</span><br><span class="line">c.push_back(make_pair(a,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">while</span>(a&gt;=c.back().first&amp;&amp;!c.empty())&#123;</span><br><span class="line">arr[c.back().second]=i-c.back().second;</span><br><span class="line">c.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">c.push_back(make_pair(a,i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!c.empty())&#123;</span><br><span class="line">arr[c.back().second]=n<span class="number">-1</span>-c.back().second;</span><br><span class="line">c.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> stack </tag>
            
            <tag> 經典題 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1161</title>
      <link href="//TIOJ-1161.html"/>
      <url>//TIOJ-1161.html</url>
      
        <content type="html"><![CDATA[<h1 id="1161-4-虛擬番茄online"><a href="#1161-4-虛擬番茄online" class="headerlink" title="1161 . 4.虛擬番茄online"></a>1161 . 4.虛擬番茄online</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1161" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1161</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>球主最近被某款剛推出不久的線上遊戲「虛擬蕃茄online」給吸引住了。</p><p>「虛擬蕃茄online」是一個關於人生的遊戲。在人生的路途當中，你必須不斷地學習各種不同的技能，以應付隨時在變化的環境。但是有的時候，你必須擁有一定水準的能力，才能習得該技能。這個時候，你需要的是一個人生顧問(茶)。</p><p>在「虛擬蕃茄online」當中，有一種專門提供諮詢服務的NPsC(誤)。他們是裁決你習得某個技能所須至少具備的「力量點數(strength)」以及「敏捷點數(agility)」，你的力量點數和敏捷點數都必須不小於該數值，才有能力習得該技能。噢，對了，這種NPsC有個特別響亮的名號：「蕃茄諮詢線上裁判-Tomato’s Information Online Judge」。</p><p>球主發現他想要學習的技能總共有$n$個，而每個技能都有所需具備的力量點數$s_i$，以及$a_i$。由於讓兩種技能點數(力量點數以及敏捷點數)分別提升$1$點所需要的時間都是「$1$個蕃茄年」，球主迫不及待地想要知道最少還需要多久就可以學習至少$k$種技巧。你能幫個忙嗎？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>題意等價於求$(x,y)$滿足座標平面上$(0,0)$到$(x,y)$之間有至少$k$個點，且$x+y$最小</p><p>這個時候就要請出一個解決二維問題的套路：窮舉一維用資結砸另一維</p><p>這裏我們可以枚舉$x$座標，這時候我們會發現對於所有掃過的點，我們只關心他們之中第$k$小的$y$座標，那就先照$x$座標排序，之後開個max heap的<code>priority_queue</code>，每掃到一個點就把他的$y$座標塞進<code>priority_queue</code>，如果大小超過$k$就把最大的<code>pop</code>掉</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,k,mini;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; arr[<span class="number">1000010</span>];</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(;t&gt;<span class="number">0</span>;t--)&#123;</span><br><span class="line"><span class="keyword">while</span>(!p.empty())p.pop();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;arr[i].first&gt;&gt;arr[i].second;</span><br><span class="line">sort(arr,arr+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">p.push(arr[i].second);</span><br><span class="line">mini=arr[k<span class="number">-1</span>].first+p.top();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;n&amp;&amp;i&lt;mini;i++)&#123;</span><br><span class="line">p.push(arr[i].second);</span><br><span class="line">p.pop();</span><br><span class="line">mini=<span class="built_in">min</span>(mini,arr[i].first+p.top());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mini&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> priority_queue </tag>
            
            <tag> pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1160</title>
      <link href="//TIOJ-1160.html"/>
      <url>//TIOJ-1160.html</url>
      
        <content type="html"><![CDATA[<h1 id="1160-3-動態眾數問題"><a href="#1160-3-動態眾數問題" class="headerlink" title="1160 . 3.動態眾數問題"></a>1160 . 3.動態眾數問題</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1160" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1160</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>雖然聖誕節快要到了，但這不是動態種樹問題，而是凍態眾樹問題(眾毆)。</p><p>所謂的眾數(英文叫做mode)，就是指一些數字當中出現頻率最高的數。</p><p>對於已經給定的資料來說，計算眾數所需要的時間基本上是線性的，理論上對各位來說理應相當的簡單。</p><p>現在讓我們考慮一個不斷增加的動態集合(dynamic set)，為了探討眾數的變化情況，我們想要知道每次增加一個數字以後，眾數的個數以及最小的眾數數值。請你寫個程式來達成這個任務吧！</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>想法就是紀錄一個數出現幾次了，因為值域偏大所以用<code>unordered_map</code></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p;</span><br><span class="line"><span class="keyword">int</span> a,ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ans;</span><br><span class="line">p[ans]++;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"1 "</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&amp;&amp;a)&#123;</span><br><span class="line">p[a]++;</span><br><span class="line"><span class="keyword">if</span>(p[a]&gt;p[ans]||(p[a]==p[ans]&amp;&amp;a&lt;ans))</span><br><span class="line">ans=a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p[ans]&lt;&lt;<span class="string">' '</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> unordered_map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1116</title>
      <link href="//TIOJ-1116.html"/>
      <url>//TIOJ-1116.html</url>
      
        <content type="html"><![CDATA[<h1 id="1116-十字路口行車方向問題"><a href="#1116-十字路口行車方向問題" class="headerlink" title="1116 . 十字路口行車方向問題"></a>1116 . 十字路口行車方向問題</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1116" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1116</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有一個十字路口，如下圖所示，路口周圍的四個路段(甲、乙、丙、丁)可為單向或雙向行車，我們以 “a” 表示單向且行車方向面對路口，”b” 表示單向且行車方向背向路口， “c” 表示雙向行車。當有一車輛由一路段駛向路口時，我們用 A 表其可向左轉，B 表可以向右轉，C 表可以直行。請設計一程式回答以下問題：當給予(亦即輸入)各個路段的行車方向，請回答(亦即輸出)車輛由各路段駛入路口時，其行車方向有哪些選擇。</p><p><img src="/images/TIOJ-1116a.gif" alt=""></p><p>條件限制：</p><ol><li><p>若一路段為單向行車且其方向為背向路口，則此路段不會有車駛入路口，此時我們以 “X” 作為該路段的輸出。</p></li><li><p>若車輛由一路段駛入路口時，其沒有行車方向可選擇(亦即直行、左轉、右轉都不可)，此時我們用 “Y” 作為該路段的輸出。</p></li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>不知道這題要考什麼@@</p><p>閱讀測驗裸題，反正好好做就沒了</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s,t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">t.resize(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'b'</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'X'</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">3</span>]!=<span class="string">'a'</span>)</span><br><span class="line">t.push_back(<span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]!=<span class="string">'a'</span>)</span><br><span class="line">t.push_back(<span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">2</span>]!=<span class="string">'a'</span>)</span><br><span class="line">t.push_back(<span class="string">'C'</span>);</span><br><span class="line"><span class="keyword">if</span>(t.empty())</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'Y'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;t;</span><br><span class="line">&#125;</span><br><span class="line">s.push_back(s[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">s.push_back(s[i]);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">", "</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'b'</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'X'</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">t.resize(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(s[i+<span class="number">3</span>]!=<span class="string">'a'</span>)</span><br><span class="line">t.push_back(<span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">if</span>(s[i+<span class="number">1</span>]!=<span class="string">'a'</span>)</span><br><span class="line">t.push_back(<span class="string">'B'</span>);</span><br><span class="line"><span class="keyword">if</span>(s[i+<span class="number">2</span>]!=<span class="string">'a'</span>)</span><br><span class="line">t.push_back(<span class="string">'C'</span>);</span><br><span class="line"><span class="keyword">if</span>(t.empty())</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'Y'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 閱讀測驗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1126</title>
      <link href="//TIOJ-1126.html"/>
      <url>//TIOJ-1126.html</url>
      
        <content type="html"><![CDATA[<h1 id="1126-尋找對稱字串"><a href="#1126-尋找對稱字串" class="headerlink" title="1126 . 尋找對稱字串"></a>1126 . 尋找對稱字串</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1126" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1126</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>若一個字串無論是從左至右讀，或者是從右至左讀，都獲得相同的結果，則我們稱此字串為對稱字串。舉例來說，absba便是一個對稱字串。</p><p>對於任何一個字串而言，該字串可能包含有對稱的部份，稱之為對稱子字串。以字串mississippi為例，此字串有多個對稱子字串，如ississi以及ippi等，且其中以ississi為最長的對稱子字串，其長度為$7$。</p><p>請寫出一個程式可以找出一字串內的最長對稱子字串之長度。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>看到這題本來想說「喔這就枚舉對稱點嘛」，看到值域「字串長度不超過$30$」……</p><p>上古時期的北市賽根本水箭龜，暴力都會過= =</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line"><span class="keyword">int</span> maxu=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+maxu;j&lt;s.length();j++)&#123;</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=j-i;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i+k]!=s[j-k])&#123;</span><br><span class="line">ok=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ok)</span><br><span class="line">maxu=<span class="built_in">max</span>(maxu,j-i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxu&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> 字串 </tag>
            
            <tag> 暴力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1080</title>
      <link href="//TIOJ-1080.html"/>
      <url>//TIOJ-1080.html</url>
      
        <content type="html"><![CDATA[<h1 id="1080-A-逆序數對"><a href="#1080-A-逆序數對" class="headerlink" title="1080 . A.逆序數對"></a>1080 . A.逆序數對</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1080" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1080</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>對一個數列$S$來說，若$S$的第$i$項$s_i$與第$j$項$s_j$符合$s_i&gt;s_j$，並且$i&lt;j$的話，那麼我們說$(i,j)$是一個逆序數對。請問給定$S$，總共有多少個逆序數對呢？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>我不會做逆序數對啦QwQ，聽完DP課之後想要刻mergesort，結果即使看了卦長的模板還是SF……</p><p>最後還是放棄跑來刻值域BIT，反正我的BIT欠缺練習也是真的。然後因為沒看好輸出WA了很多次，但基本上沒什麼問題，BIT威能</p><p>基本上就是離散化之後塞值域BIT，對於每個數先把它塞進去，之後讀他後面有多少數就知道她原數列中他前面有多少數字</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">bit</span>[<span class="number">100010</span>],n,arr[<span class="number">100010</span>],a,c=<span class="number">1</span>;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(pos&lt;=n)&#123;</span><br><span class="line"><span class="built_in">bit</span>[pos]++;</span><br><span class="line">pos+=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(pos&gt;<span class="number">0</span>)&#123;</span><br><span class="line">ans+=<span class="built_in">bit</span>[pos];</span><br><span class="line">pos-=lowbit(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">p.push(make_pair(a,i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">arr[p.top().second]=i;</span><br><span class="line">p.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">bit</span>[i]=<span class="number">0</span>;</span><br><span class="line">a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">add(arr[i]);</span><br><span class="line">a+=i-query(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;c&lt;&lt;<span class="string">": "</span>&lt;&lt;a&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> BIT </tag>
            
            <tag> priority_queue </tag>
            
            <tag> 離散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1735</title>
      <link href="//TIOJ-1735.html"/>
      <url>//TIOJ-1735.html</url>
      
        <content type="html"><![CDATA[<h1 id="1735-k-口吃子字串"><a href="#1735-k-口吃子字串" class="headerlink" title="1735 . k-口吃子字串"></a>1735 . k-口吃子字串</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1735" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1735</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>一個$k$-口吃字串就是”某一個長度為$k$的字串重複兩次”，例如 abcdabcd 是一個 $4$-口吃字串，而 aaaaaaaa 也是一個 $4$-口吃字串(aaaa重複兩次)。abcabc, abcdeabcde, aaaaaaa 則都不是 $4$-口吃字串</p><p>對於一個字串 $S$，其中的 “$k$-口吃子字串” 就是一個 $S$ 的子字串, 且他同時也是一個 $k$-口吃字串。子字串在這裡的定義就是 $S$ 的連續一小部份 (也可以是全部)，比方說如果 $S$ 是 abcdefg，則 ab, cdef, abcdefg, g 等等都是 $S$ 的子字串</p><p>給你一個字串 $S$，請回答其中有幾個 “k-口吃子字串”?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這題還挺有趣的</p><p>本來想要hash之類的硬做，後來發現我們可以開一個<code>bool array</code>存<code>s[i]==s[i+k]</code>，然後看他有多少段連續的<code>true</code>，而且還可以滾動，雖說經歷了一些唬爛的過程不過可以很輕易的AC</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> k,i,a[<span class="number">100010</span>],c,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;k)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line">c=n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i+k&lt;s.length();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[i+k])&#123;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">if</span>(n&gt;=k)</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1400</title>
      <link href="//TIOJ-1400.html"/>
      <url>//TIOJ-1400.html</url>
      
        <content type="html"><![CDATA[<h1 id="1400-神秘的黑盒子"><a href="#1400-神秘的黑盒子" class="headerlink" title="1400 . 神秘的黑盒子"></a>1400 . 神秘的黑盒子</h1><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p><a href="https://tioj.ck.tp.edu.tw/problems/1400" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1400</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有一個黑盒子支援 PUSH, GET, EXIT, END四種指令：</p><p>PUSH $x$：將 $x$ 丟入黑盒子之中。</p><p>GET：取出黑盒子當中第 $k$ 小的數字，其中 $k$ 是同一組測試資料中先前呼叫GET成功的次數$+1$，若找不到該數則什麼都不用操作，當作沒事一樣。</p><p>EXIT：換一組測試資料，清空黑盒子。</p><p>END：請結束程式。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這題好可怕= =<br><img src="/images/TIOJ-1400a.png" alt=""><br>我的作法是開一個max heap，維護它的大小是$n$，那麼get的時候只要取他的<code>top</code>就好了，塞不進去的東西就放進一個min heap。</p><p>雖說去年就想到這個做法了，可是之前一直用<code>string</code>去吃他的指令然後就大TLE，這次重寫用的是輸入優化，但是因為bug一大堆所以狂吃WA，最後的作法是<code>cin.get()``吃指令的第一個字元，</code>cin.ignore()``把多的東西拔掉，用原本的<code>cin</code>吃整數。這樣就可以AC了(所以說<code>cin</code>吃<code>string</code>是多慢啊？)</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;b;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt; &gt;s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,n=<span class="number">1</span>,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>.<span class="built_in">get</span>(a))&#123;</span><br><span class="line"><span class="keyword">switch</span>(a)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'P'</span>:</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">s.push(x);</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">size</span>()&gt;n)&#123;</span><br><span class="line">b.push(s.top());</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'G'</span>:</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="keyword">if</span>(n&lt;=b.<span class="built_in">size</span>()+s.<span class="built_in">size</span>())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;n&amp;&amp;!b.empty())&#123;</span><br><span class="line">s.push(b.top());</span><br><span class="line">b.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line"><span class="built_in">cin</span>.<span class="built_in">get</span>(a);</span><br><span class="line"><span class="keyword">if</span>(a==<span class="string">'N'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="built_in">cin</span>.ignore();</span><br><span class="line"><span class="keyword">while</span>(!b.empty())</span><br><span class="line">b.pop();</span><br><span class="line"><span class="keyword">while</span>(!s.empty())</span><br><span class="line">s.pop();</span><br><span class="line">n=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式競賽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> priority_queue </tag>
            
            <tag> 輸入輸出 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
